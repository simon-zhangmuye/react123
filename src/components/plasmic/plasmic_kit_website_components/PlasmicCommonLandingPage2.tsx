// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: vfJVtA9eRVA
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Banner from "../../Banner"; // plasmic-import: QBF7nr-k8Wj/component
import Header from "../../Header"; // plasmic-import: vtgKf8zu4R/component
import HomeHero from "../../HomeHero"; // plasmic-import: CTFlDz32c2/component
import ValuePropsListSection from "../../ValuePropsListSection"; // plasmic-import: 2xJBbfTP-H7/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: lJppbKgSOw/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component
import BelowFoldCtaRow from "../../BelowFoldCtaRow"; // plasmic-import: JF4MWU3g67-/component
import ValuePropSection from "../../ValuePropSection"; // plasmic-import: 6Zq5_xjO9F/component
import SmallValuePropCard from "../../SmallValuePropCard"; // plasmic-import: ZsmzGgkZw2/component
import Linky from "../../Linky"; // plasmic-import: EDH0JqEGKc/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import ValuePropCardsSection from "../../ValuePropCardsSection"; // plasmic-import: 3Qfldk4cSlr/component
import QuotesScroller from "../../QuotesScroller"; // plasmic-import: pDZtEWqRzT/component
import Testimonials from "../../Testimonials"; // plasmic-import: DJbGaLTtKAR/component
import BottomCtaSection from "../../BottomCtaSection"; // plasmic-import: MEBiyy_4nD/component
import Footer from "../../Footer"; // plasmic-import: 9R5YynM9KVp/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicCommonLandingPage2.module.css"; // plasmic-import: vfJVtA9eRVA/css

import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: mrC2Ljeqti/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: YhhYiXTtXT/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 5amV9exkN9/icon
import Icon27Icon from "./icons/PlasmicIcon__Icon27"; // plasmic-import: E2O_OGnBZf/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: V9OFkmlcnz/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 7p8MViVJAB/icon
import Icon24Icon from "./icons/PlasmicIcon__Icon24"; // plasmic-import: Qm3zx5PVC/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: d8TOpAp1CP/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: rP3WBmFG-e/icon
import ecommerceHeroImagepng2Uvdbpwnkv from "./images/ecommerceHeroImagepng2.png"; // plasmic-import: UVDBPWNKV/picture
import image72FFo6Q3Mln from "./images/image72.png"; // plasmic-import: FFo6q3mln/picture
import image7RU1GD3ENw from "./images/image7.svg"; // plasmic-import: rU1g-d3eNw/picture
import image6Zk4QpLvJs from "./images/image6.svg"; // plasmic-import: ZK4QPLv_Js/picture
import image15CGjdWD3Lc from "./images/image15.svg"; // plasmic-import: CGjd_wD3lc/picture
import imageJEb6FwUqh2 from "./images/image.svg"; // plasmic-import: jEB6FWUqh2/picture
import image3Ye53PEpLv from "./images/image3.svg"; // plasmic-import: YE53p_epLv/picture
import image4SuzPkCmZfz from "./images/image4.svg"; // plasmic-import: SuzPKCmZFZ/picture
import image8Pjopgnvz6 from "./images/image8.svg"; // plasmic-import: PJOPGNVZ-6/picture
import image53LFnfKPfDu from "./images/image53.png"; // plasmic-import: LFnfKPfDu/picture
import image904Yo870MHj from "./images/image9.svg"; // plasmic-import: 04YO870mHJ/picture
import image11C1Emdq7MU7 from "./images/image11.svg"; // plasmic-import: C1Emdq7mU7/picture
import image12WiXt2Gdxg from "./images/image12.png"; // plasmic-import: WiXT2gdxg/picture
import image75WTvOxGb6B from "./images/image75.png"; // plasmic-import: WTvOXGb6b/picture
import image748T6TyW2Sn from "./images/image74.png"; // plasmic-import: 8t6tyW2SN/picture
import image76K6RrS2DFz from "./images/image76.png"; // plasmic-import: K6rrS2dFZ/picture
import image77XlZeK5Zq from "./images/image77.png"; // plasmic-import: Xl_ZeK5Zq/picture
import image87Q5HyGrQzo from "./images/image87.png"; // plasmic-import: q5HyGrQzo/picture
import image819KjKXf8AA from "./images/image81.png"; // plasmic-import: 9KjKXf8aA/picture
import image83G6DF9FdL from "./images/image83.png"; // plasmic-import: _G6dF9FdL/picture
import image78QZwEvhzU2 from "./images/image78.png"; // plasmic-import: QZwEvhzU2/picture
import image82LYItEpXgS from "./images/image82.png"; // plasmic-import: lYItEpXgS/picture
import image84FyKjl3Owe from "./images/image84.png"; // plasmic-import: fyKJL3owe/picture
import image86ZvTNx6QJy from "./images/image86.png"; // plasmic-import: zvTNx6qJy/picture
import image85KCxujGJaO from "./images/image85.png"; // plasmic-import: KCxujGJaO/picture

export type PlasmicCommonLandingPage2__VariantMembers = {};

export type PlasmicCommonLandingPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicCommonLandingPage2__VariantsArgs;
export const PlasmicCommonLandingPage2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCommonLandingPage2__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  integrationSection?: React.ReactNode;
  slot4?: React.ReactNode;
  children2?: React.ReactNode;
  slot5?: React.ReactNode;
  slot22?: React.ReactNode;
  slot3?: React.ReactNode;
  slot6?: React.ReactNode;
  container?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCommonLandingPage2__ArgsType;
export const PlasmicCommonLandingPage2__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "integrationSection",
  "slot4",
  "children2",
  "slot5",
  "slot22",
  "slot3",
  "slot6",
  "container"
);

export type PlasmicCommonLandingPage2__OverridesType = {
  root?: p.Flex<"div">;
  banner?: p.Flex<typeof Banner>;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  homeHero?: p.Flex<typeof HomeHero>;
  makeEditable?: p.Flex<typeof ValuePropsListSection>;
  belowFoldCtaRow?: p.Flex<typeof BelowFoldCtaRow>;
  valuePropSection?: p.Flex<typeof ValuePropSection>;
  first?: p.Flex<typeof ValuePropSection>;
  link?: p.Flex<"a">;
  buttonLink?: p.Flex<typeof ButtonLink>;
  container?: p.Flex<"div">;
  valueA14?: p.Flex<typeof SmallValuePropCard>;
  valueA24?: p.Flex<typeof SmallValuePropCard>;
  valueA2222?: p.Flex<typeof SmallValuePropCard>;
  valueA22?: p.Flex<typeof SmallValuePropCard>;
  valueA22222?: p.Flex<typeof SmallValuePropCard>;
  valueA12?: p.Flex<typeof SmallValuePropCard>;
  valueA222223?: p.Flex<typeof SmallValuePropCard>;
  valueA232?: p.Flex<typeof SmallValuePropCard>;
  valueA2232?: p.Flex<typeof SmallValuePropCard>;
  productHuntBadge?: p.Flex<"a">;
  quotesScroller?: p.Flex<typeof QuotesScroller>;
  testimonials?: p.Flex<typeof Testimonials>;
  bottomCtaSection?: p.Flex<typeof BottomCtaSection>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultCommonLandingPage2Props {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  integrationSection?: React.ReactNode;
  slot4?: React.ReactNode;
  children2?: React.ReactNode;
  slot5?: React.ReactNode;
  slot22?: React.ReactNode;
  slot3?: React.ReactNode;
  slot6?: React.ReactNode;
  container?: React.ReactNode;
  className?: string;
}

function PlasmicCommonLandingPage2__RenderFunc(props: {
  variants: PlasmicCommonLandingPage2__VariantsArgs;
  args: PlasmicCommonLandingPage2__ArgsType;
  overrides: PlasmicCommonLandingPage2__OverridesType;
  dataFetches?: PlasmicCommonLandingPage2__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        )
      })}
    >
      {false ? (
        <Banner
          data-plasmic-name={"banner"}
          data-plasmic-override={overrides.banner}
          className={classNames("__wab_instance", sty.banner)}
        />
      ) : null}

      <Header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames("__wab_instance", sty.header)}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        hasGap={true}
        className={classNames(defaultcss.all, sty.body)}
      >
        <HomeHero
          data-plasmic-name={"homeHero"}
          data-plasmic-override={overrides.homeHero}
          className={classNames("__wab_instance", sty.homeHero)}
          slot={p.renderPlasmicSlot({
            defaultContents: (
              <span>
                <React.Fragment>
                  {
                    "The visual builder and web design tool that works seamlessly with your codebase. "
                  }
                </React.Fragment>
                <span style={{ fontWeight: 700 }}>{"Unblock your team"}</span>
                <React.Fragment>
                  {", and empower anyone to ship."}
                </React.Fragment>
              </span>
            ),
            value: args.slot2
          })}
          slot2={p.renderPlasmicSlot({
            defaultContents: (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__g76O)}
                height={597 as const}
                role={"img"}
                src={ecommerceHeroImagepng2Uvdbpwnkv}
                width={1017 as const}
              />
            ),

            value: args.slot6
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <span>
                <React.Fragment>
                  {"Build beautiful experiences ⚡️ "}
                </React.Fragment>
                <span style={{ fontStyle: "italic" }}>{"fast"}</span>
                <React.Fragment>{"."}</React.Fragment>
              </span>
            ),
            value: args.slot
          })}
        </HomeHero>

        <ValuePropsListSection
          data-plasmic-name={"makeEditable"}
          data-plasmic-override={overrides.makeEditable}
          className={classNames("__wab_instance", sty.makeEditable)}
          evenSplit={"evenSplit" as const}
          showcaseImage={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__vdyNb)}
              height={515 as const}
              role={"img"}
              src={image72FFo6Q3Mln}
              width={860 as const}
            />
          }
          slot={p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__lquSq
                )}
              >
                {"Move fast. Grow faster."}
              </div>
            ),

            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__global_theme_altHeadlineFont]: hasVariant(
                globalVariants,
                "theme",
                "altHeadlineFont"
              )
            })
          })}
          slot2={null}
          slot3={null}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__pHnPz)}
              >
                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__xruuH
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon12Icon
                        className={classNames(defaultcss.all, sty.svg___4NgSb)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"No-code autonomy."}
                >
                  {
                    "Easy-to-use but powerful drag-and-drop builder to create pages incredibly fast."
                  }
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider___83Gsf)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon___6TM6E
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg__yoPqM)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Publish instantly."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__pCtFm
                    )}
                  >
                    {
                      "Stop waiting on development cycles. Iterate toward higher growth faster."
                    }
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__eFeLk)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__uVBbV
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon22Icon
                        className={classNames(defaultcss.all, sty.svg__sbO0V)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Free up developers."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__uQ7Oi
                    )}
                  >
                    {"Let developers focus on code rather than pixel-pushing."}
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__sCaSb)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__ieq0B
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon27Icon
                        className={classNames(defaultcss.all, sty.svg__aqfA)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Hit the ground running."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__mHq7H
                    )}
                  >
                    {
                      "Use your existing design system, import from Figma, or grab our templates."
                    }
                  </div>
                </ValuePropListItem>
              </p.Stack>
            ),

            value: args.slot4
          })}
        </ValuePropsListSection>

        <BelowFoldCtaRow
          data-plasmic-name={"belowFoldCtaRow"}
          data-plasmic-override={overrides.belowFoldCtaRow}
          className={classNames("__wab_instance", sty.belowFoldCtaRow)}
        />

        <ValuePropSection
          data-plasmic-name={"valuePropSection"}
          data-plasmic-override={overrides.valuePropSection}
          actionButton={null}
          backgroundColor={"blue2" as const}
          backgroundImage={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__uxPm1)}
              height={145 as const}
              role={"img"}
              src={image7RU1GD3ENw}
              width={300 as const}
            />
          }
          className={classNames("__wab_instance", sty.valuePropSection)}
          description={null}
          extraSlot={
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__vfOyv)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__qBImS)}
              >
                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard__tw3B
                  )}
                  description={p.renderPlasmicSlot({
                    defaultContents:
                      "Plug into your existing codebase. Use any commerce platform, hosting, CMS, and more.",
                    value: args.children2
                  })}
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__y6QmX
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__dHTkz
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__bnnUp
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon32Icon
                        className={classNames(defaultcss.all, sty.svg__mbVe5)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {"For any tech stack."}
                </SmallValuePropCard>

                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard__grvQj
                  )}
                  description={
                    "Static build support. Image and asset optimization. Web Vitals best practices. And much more."
                  }
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky___4PgVo
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__isEuK
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__ykOpI
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon27Icon
                        className={classNames(defaultcss.all, sty.svg__u6Koz)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {"Blazing speed built in."}
                </SmallValuePropCard>

                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard__fyXyA
                  )}
                  description={
                    "Start with a single page or section. Simply import and render from your code."
                  }
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__v3Lzt
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__anl0B
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__vt31J
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon6Icon
                        className={classNames(defaultcss.all, sty.svg___1Zc7D)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {"Adopt incrementally."}
                </SmallValuePropCard>

                <SmallValuePropCard
                  actionButton={null}
                  className={classNames(
                    "__wab_instance",
                    sty.smallValuePropCard__d96Xl
                  )}
                  description={p.renderPlasmicSlot({
                    defaultContents:
                      "Bring your own code components, and extend any Plasmic component with code.",
                    value: args.slot5
                  })}
                  followupLink={
                    false ? (
                      <Linky
                        className={classNames(
                          "__wab_instance",
                          sty.linky__vHxls
                        )}
                        link={
                          "https://studio.plasmic.app/?starters=general,site-builder" as const
                        }
                        style={["noPadding"]}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__tygT
                          )}
                        >
                          {"Browse starter projects ->"}
                        </div>
                      </Linky>
                    ) : null
                  }
                  icon={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__pbu9R
                      )}
                      colors={"lightPurpleSolid" as const}
                    >
                      <Icon24Icon
                        className={classNames(defaultcss.all, sty.svg__jFUiX)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  showcaseImage={null}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Works seamlessly with code.",
                    value: args.slot22
                  })}
                </SmallValuePropCard>
              </p.Stack>
            </p.Stack>
          }
          extras={["withExtraSlot1", "centerAligned", "withExtraSlot2"]}
          header={null}
          icon={null}
          slot62={null}
          title={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__w77Ba
              )}
            >
              {"No-compromise developer flexibility."}
            </div>
          }
        />

        {false ? (
          <ValuePropSection
            data-plasmic-name={"first"}
            data-plasmic-override={overrides.first}
            actionButton={
              <a
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(defaultcss.all, sty.link)}
                href={"/learn/" as const}
              >
                <ButtonLink
                  data-plasmic-name={"buttonLink"}
                  data-plasmic-override={overrides.buttonLink}
                  href={"/learn/" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__lw3GF)}
                      role={"img"}
                    />
                  }
                  label={"Learn more"}
                />
              </a>
            }
            backgroundColor={"blue" as const}
            backgroundImage={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__d0QKq)}
                height={95 as const}
                role={"img"}
                src={image6Zk4QpLvJs}
                width={300 as const}
              />
            }
            className={classNames("__wab_instance", sty.first)}
            description={
              "Plasmic Studio works in the Chrome and Firefox web browsers and accessible on macOS, Linux, and Windows."
            }
            extraSlot={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__uuGxi)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__np2Uo)}
                >
                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon___5OzZh
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon21Icon
                          className={classNames(defaultcss.all, sty.svg__am5X0)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    {
                      "Whether you’re a developer, designer, or content creative, Plasmic Studio scales to your desired level of control."
                    }
                  </ValuePropListItem>

                  <Divider
                    className={classNames(
                      "__wab_instance",
                      sty.divider___5DRsx
                    )}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__uAfpV
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon20Icon
                          className={classNames(defaultcss.all, sty.svg__zKaXj)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__bFhp
                      )}
                    >
                      {
                        "Free up developers and iterate faster. Or accelerate your own development cycles."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__ygUng)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__xOdjG
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon22Icon
                          className={classNames(defaultcss.all, sty.svg__fRu4D)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___9RKfj
                      )}
                    >
                      {
                        "Keep everyone on the same page, with a single source of truth for design and production."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__u6Tg)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__ly2H0
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon23Icon
                          className={classNames(defaultcss.all, sty.svg__u050)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__bOrt7
                      )}
                    >
                      {
                        "Use an intuitive layout system built for humans to create complex responsive pages."
                      }
                    </div>
                  </ValuePropListItem>
                </p.Stack>
              </p.Stack>
            }
            extras={["withExtraSlot1", "centerAligned"]}
            header={null}
            icon={null}
            title={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___7M7Dm,
                  {
                    [sty.box__global_theme_altHeadlineFont___7M7DmFQkvX]:
                      hasVariant(globalVariants, "theme", "altHeadlineFont")
                  }
                )}
              >
                <span>
                  <React.Fragment>
                    {"Make your product editable to "}
                  </React.Fragment>
                  <span style={{ textDecoration: "underline" }}>
                    {"anyone"}
                  </span>
                  <React.Fragment>{"."}</React.Fragment>
                </span>
              </div>
            }
          />
        ) : null}
        {false ? (
          <section className={classNames(defaultcss.all, sty.section__n0FHy)}>
            <div className={classNames(defaultcss.all, sty.box__scPjK)}>
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__lsQrq)}
                height={150 as const}
                role={"img"}
                src={image15CGjdWD3Lc}
                width={205 as const}
              />
            </div>
          </section>
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: null,
          value: args.integrationSection
        })}

        <section className={classNames(defaultcss.all, sty.section__hl4K)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(defaultcss.all, sty.container)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__hNze)}
                    height={126 as const}
                    role={"img"}
                    src={imageJEb6FwUqh2}
                    width={300 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__skRo2)}
                    height={76 as const}
                    role={"img"}
                    src={image3Ye53PEpLv}
                    width={300 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__irid5)}
                    height={79 as const}
                    role={"img"}
                    src={image4SuzPkCmZfz}
                    width={300 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__f1Bts)}
                    height={150 as const}
                    role={"img"}
                    src={image8Pjopgnvz6}
                    width={250 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__vvY5U)}
                    height={195 as const}
                    role={"img"}
                    src={image53LFnfKPfDu}
                    width={670 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__oqmll)}
                    height={82 as const}
                    role={"img"}
                    src={image904Yo870MHj}
                    width={300 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__xO4AM)}
                    height={68 as const}
                    role={"img"}
                    src={image11C1Emdq7MU7}
                    width={300 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__mn6Pi)}
                    height={623 as const}
                    role={"img"}
                    src={image12WiXt2Gdxg}
                    width={2600 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__orpQs)}
                    height={313 as const}
                    role={"img"}
                    src={image75WTvOxGb6B}
                    width={500 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img___5L6GX)}
                    height={195 as const}
                    role={"img"}
                    src={image748T6TyW2Sn}
                    width={377 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__xj1K6)}
                    height={224 as const}
                    role={"img"}
                    src={image76K6RrS2DFz}
                    width={375 as const}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__iigpS)}
                    height={212 as const}
                    role={"img"}
                    src={image77XlZeK5Zq}
                    width={768 as const}
                  />
                </React.Fragment>
              ),
              value: args.container
            })}
          </p.Stack>
        </section>

        {false ? (
          <ValuePropCardsSection
            backgrounds={"white" as const}
            className={classNames(
              "__wab_instance",
              sty.valuePropCardsSection___2YbbV
            )}
            slot={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__zMf5O
                )}
              >
                {"Limitless use cases."}
              </div>
            }
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___1BzKw)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns__dmM1K)}
              >
                <div className={classNames(defaultcss.all, sty.column__b3CIq)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA14"}
                    data-plasmic-override={overrides.valueA14}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA14)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__rZkbL)}
                        height={300 as const}
                        loading={"lazy" as const}
                        role={"img"}
                        src={image87Q5HyGrQzo}
                        width={590 as const}
                      />
                    }
                  >
                    {"Landing pages"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column__cPnk8)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA24"}
                    data-plasmic-override={overrides.valueA24}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA24)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__rK2I2)}
                        height={683 as const}
                        loading={"lazy" as const}
                        role={"img"}
                        src={image819KjKXf8AA}
                        width={1018 as const}
                      />
                    }
                  >
                    {"Headless storefronts"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns__y6VVa)}
              >
                <div className={classNames(defaultcss.all, sty.column__dykeY)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA2222"}
                    data-plasmic-override={overrides.valueA2222}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA2222)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img___8POp)}
                        height={298 as const}
                        role={"img"}
                        src={image83G6DF9FdL}
                        width={554 as const}
                      />
                    }
                  >
                    {"Cart upsells"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column___7Obv)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA22"}
                    data-plasmic-override={overrides.valueA22}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA22)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__uakJa)}
                        height={250 as const}
                        role={"img"}
                        src={image78QZwEvhzU2}
                        width={452 as const}
                      />
                    }
                  >
                    {"Offer overlays"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns__lmCrN)}
              >
                <div className={classNames(defaultcss.all, sty.column__tMvys)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA22222"}
                    data-plasmic-override={overrides.valueA22222}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA22222)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__u9Zkf)}
                        height={204 as const}
                        loading={"lazy" as const}
                        role={"img"}
                        src={image82LYItEpXgS}
                        width={435 as const}
                      />
                    }
                  >
                    {"Announcement bars"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column__rf1Bi)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA12"}
                    data-plasmic-override={overrides.valueA12}
                    actionButton={null}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__v3Dk0)}
                        height={334 as const}
                        loading={"lazy" as const}
                        role={"img"}
                        src={image84FyKjl3Owe}
                        width={557 as const}
                      />
                    }
                  >
                    {"Product detail pages"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.columns__dVsFh)}
              >
                <div className={classNames(defaultcss.all, sty.column__c2K8)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA222223"}
                    data-plasmic-override={overrides.valueA222223}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA222223)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__xcmX7)}
                        height={204 as const}
                        loading={"lazy" as const}
                        role={"img"}
                        src={image82LYItEpXgS}
                        width={435 as const}
                      />
                    }
                  >
                    {"Announcement bars"}
                  </SmallValuePropCard>

                  <SmallValuePropCard
                    data-plasmic-name={"valueA232"}
                    data-plasmic-override={overrides.valueA232}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA232)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img___661B)}
                        height={164 as const}
                        loading={"lazy" as const}
                        role={"img"}
                        src={image86ZvTNx6QJy}
                        width={432 as const}
                      />
                    }
                  >
                    {"Heroes"}
                  </SmallValuePropCard>
                </div>

                <div className={classNames(defaultcss.all, sty.column__w1QEk)}>
                  <SmallValuePropCard
                    data-plasmic-name={"valueA2232"}
                    data-plasmic-override={overrides.valueA2232}
                    actionButton={null}
                    className={classNames("__wab_instance", sty.valueA2232)}
                    description={null}
                    followupLink={null}
                    icon={null}
                    ltr={"ltr" as const}
                    showcaseImage={
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__bszud)}
                        height={226 as const}
                        loading={"lazy" as const}
                        role={"img"}
                        src={image85KCxujGJaO}
                        width={596 as const}
                      />
                    }
                  >
                    {"Promotional sections"}
                  </SmallValuePropCard>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__ibOkh)}
              />
            </p.Stack>
          </ValuePropCardsSection>
        ) : null}
        {true ? (
          <ValuePropCardsSection
            backgrounds={"white" as const}
            className={classNames(
              "__wab_instance",
              sty.valuePropCardsSection__yrVi8
            )}
            slot={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___93AIn
                )}
              >
                {"Limitless use cases."}
              </div>
            }
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__caSsq)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__tSN2)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(
                            defaultcss.img,
                            sty.img___0CQil
                          )}
                          height={300 as const}
                          loading={"lazy" as const}
                          role={"img"}
                          src={image87Q5HyGrQzo}
                          width={590 as const}
                        />
                      }
                    >
                      {"Landing pages"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__afgOu
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img___2Yqv)}
                          height={683 as const}
                          loading={"lazy" as const}
                          role={"img"}
                          src={image819KjKXf8AA}
                          width={1018 as const}
                        />
                      }
                    >
                      {"Headless storefronts"}
                    </SmallValuePropCard>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__mivs4)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard___8K77L
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img__puKh7)}
                          height={298 as const}
                          role={"img"}
                          src={image83G6DF9FdL}
                          width={554 as const}
                        />
                      }
                    >
                      {"Cart upsells"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard___8HGm
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img__tp883)}
                          height={250 as const}
                          role={"img"}
                          src={image78QZwEvhzU2}
                          width={452 as const}
                        />
                      }
                    >
                      {"Offer overlays"}
                    </SmallValuePropCard>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box___9Jeii)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__xuTSm
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img__rc1ST)}
                          height={204 as const}
                          loading={"lazy" as const}
                          role={"img"}
                          src={image82LYItEpXgS}
                          width={435 as const}
                        />
                      }
                    >
                      {"Announcement bars"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img__kwVgy)}
                          height={334 as const}
                          loading={"lazy" as const}
                          role={"img"}
                          src={image84FyKjl3Owe}
                          width={557 as const}
                        />
                      }
                    >
                      {"Product detail pages"}
                    </SmallValuePropCard>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__wMu7V)}
                  >
                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__p4Kha
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(defaultcss.img, sty.img__pX7Sx)}
                          height={164 as const}
                          loading={"lazy" as const}
                          role={"img"}
                          src={image86ZvTNx6QJy}
                          width={432 as const}
                        />
                      }
                    >
                      {"Heroes"}
                    </SmallValuePropCard>

                    <SmallValuePropCard
                      actionButton={null}
                      className={classNames(
                        "__wab_instance",
                        sty.smallValuePropCard__qoq3F
                      )}
                      description={null}
                      followupLink={null}
                      icon={null}
                      ltr={"ltr" as const}
                      showcaseImage={
                        <img
                          alt={""}
                          className={classNames(
                            defaultcss.img,
                            sty.img___7ZFfT
                          )}
                          height={226 as const}
                          loading={"lazy" as const}
                          role={"img"}
                          src={image85KCxujGJaO}
                          width={596 as const}
                        />
                      }
                    >
                      {"Promotional sections"}
                    </SmallValuePropCard>
                  </p.Stack>
                </p.Stack>
              ),

              value: args.slot3
            })}
          </ValuePropCardsSection>
        ) : null}

        <a
          data-plasmic-name={"productHuntBadge"}
          data-plasmic-override={overrides.productHuntBadge}
          className={classNames(defaultcss.all, sty.productHuntBadge)}
          href={
            "https://www.producthunt.com/posts/plasmic?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-plasmic" as const
          }
        >
          <img
            alt={
              "Plasmic - Visual builder & design tool for React, Next and Gatsby | Product Hunt" as const
            }
            className={classNames(defaultcss.img, sty.img__gdRjs)}
            loading={"lazy" as const}
            role={"img"}
            src={
              "https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=290978&theme=light" as const
            }
          />
        </a>

        <QuotesScroller
          data-plasmic-name={"quotesScroller"}
          data-plasmic-override={overrides.quotesScroller}
          className={classNames("__wab_instance", sty.quotesScroller)}
        >
          <Testimonials
            data-plasmic-name={"testimonials"}
            data-plasmic-override={overrides.testimonials}
            className={classNames("__wab_instance", sty.testimonials)}
          />
        </QuotesScroller>

        <BottomCtaSection
          data-plasmic-name={"bottomCtaSection"}
          data-plasmic-override={overrides.bottomCtaSection}
          className={classNames("__wab_instance", sty.bottomCtaSection)}
        />
      </p.Stack>

      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "banner",
    "header",
    "body",
    "homeHero",
    "makeEditable",
    "belowFoldCtaRow",
    "valuePropSection",
    "first",
    "link",
    "buttonLink",
    "container",
    "valueA14",
    "valueA24",
    "valueA2222",
    "valueA22",
    "valueA22222",
    "valueA12",
    "valueA222223",
    "valueA232",
    "valueA2232",
    "productHuntBadge",
    "quotesScroller",
    "testimonials",
    "bottomCtaSection",
    "footer"
  ],
  banner: ["banner"],
  header: ["header"],
  body: [
    "body",
    "homeHero",
    "makeEditable",
    "belowFoldCtaRow",
    "valuePropSection",
    "first",
    "link",
    "buttonLink",
    "container",
    "valueA14",
    "valueA24",
    "valueA2222",
    "valueA22",
    "valueA22222",
    "valueA12",
    "valueA222223",
    "valueA232",
    "valueA2232",
    "productHuntBadge",
    "quotesScroller",
    "testimonials",
    "bottomCtaSection"
  ],
  homeHero: ["homeHero"],
  makeEditable: ["makeEditable"],
  belowFoldCtaRow: ["belowFoldCtaRow"],
  valuePropSection: ["valuePropSection"],
  first: ["first", "link", "buttonLink"],
  link: ["link", "buttonLink"],
  buttonLink: ["buttonLink"],
  container: ["container"],
  valueA14: ["valueA14"],
  valueA24: ["valueA24"],
  valueA2222: ["valueA2222"],
  valueA22: ["valueA22"],
  valueA22222: ["valueA22222"],
  valueA12: ["valueA12"],
  valueA222223: ["valueA222223"],
  valueA232: ["valueA232"],
  valueA2232: ["valueA2232"],
  productHuntBadge: ["productHuntBadge"],
  quotesScroller: ["quotesScroller", "testimonials"],
  testimonials: ["testimonials"],
  bottomCtaSection: ["bottomCtaSection"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  banner: typeof Banner;
  header: typeof Header;
  body: "div";
  homeHero: typeof HomeHero;
  makeEditable: typeof ValuePropsListSection;
  belowFoldCtaRow: typeof BelowFoldCtaRow;
  valuePropSection: typeof ValuePropSection;
  first: typeof ValuePropSection;
  link: "a";
  buttonLink: typeof ButtonLink;
  container: "div";
  valueA14: typeof SmallValuePropCard;
  valueA24: typeof SmallValuePropCard;
  valueA2222: typeof SmallValuePropCard;
  valueA22: typeof SmallValuePropCard;
  valueA22222: typeof SmallValuePropCard;
  valueA12: typeof SmallValuePropCard;
  valueA222223: typeof SmallValuePropCard;
  valueA232: typeof SmallValuePropCard;
  valueA2232: typeof SmallValuePropCard;
  productHuntBadge: "a";
  quotesScroller: typeof QuotesScroller;
  testimonials: typeof Testimonials;
  bottomCtaSection: typeof BottomCtaSection;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCommonLandingPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCommonLandingPage2__VariantsArgs;
    args?: PlasmicCommonLandingPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCommonLandingPage2__Fetches;
  } & Omit<PlasmicCommonLandingPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCommonLandingPage2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCommonLandingPage2__ArgProps,
      internalVariantPropNames: PlasmicCommonLandingPage2__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCommonLandingPage2__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCommonLandingPage2";
  } else {
    func.displayName = `PlasmicCommonLandingPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicCommonLandingPage2 = Object.assign(
  // Top-level PlasmicCommonLandingPage2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    banner: makeNodeComponent("banner"),
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    homeHero: makeNodeComponent("homeHero"),
    makeEditable: makeNodeComponent("makeEditable"),
    belowFoldCtaRow: makeNodeComponent("belowFoldCtaRow"),
    valuePropSection: makeNodeComponent("valuePropSection"),
    first: makeNodeComponent("first"),
    link: makeNodeComponent("link"),
    buttonLink: makeNodeComponent("buttonLink"),
    container: makeNodeComponent("container"),
    valueA14: makeNodeComponent("valueA14"),
    valueA24: makeNodeComponent("valueA24"),
    valueA2222: makeNodeComponent("valueA2222"),
    valueA22: makeNodeComponent("valueA22"),
    valueA22222: makeNodeComponent("valueA22222"),
    valueA12: makeNodeComponent("valueA12"),
    valueA222223: makeNodeComponent("valueA222223"),
    valueA232: makeNodeComponent("valueA232"),
    valueA2232: makeNodeComponent("valueA2232"),
    productHuntBadge: makeNodeComponent("productHuntBadge"),
    quotesScroller: makeNodeComponent("quotesScroller"),
    testimonials: makeNodeComponent("testimonials"),
    bottomCtaSection: makeNodeComponent("bottomCtaSection"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicCommonLandingPage2
    internalVariantProps: PlasmicCommonLandingPage2__VariantProps,
    internalArgProps: PlasmicCommonLandingPage2__ArgProps
  }
);

export default PlasmicCommonLandingPage2;
/* prettier-ignore-end */
