// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: 2sR5PRkxYAA
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: vtgKf8zu4R/component
import HomeHero from "../../HomeHero"; // plasmic-import: CTFlDz32c2/component
import ValuePropSection from "../../ValuePropSection"; // plasmic-import: 6Zq5_xjO9F/component
import SmallValuePropCard from "../../SmallValuePropCard"; // plasmic-import: ZsmzGgkZw2/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import ValuePropCardsSection from "../../ValuePropCardsSection"; // plasmic-import: 3Qfldk4cSlr/component
import Linky from "../../Linky"; // plasmic-import: EDH0JqEGKc/component
import BelowFoldCtaRow from "../../BelowFoldCtaRow"; // plasmic-import: JF4MWU3g67-/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: lJppbKgSOw/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component
import IntegrateAnywhereSection from "../../IntegrateAnywhereSection"; // plasmic-import: dxALvsaixcT/component
import DeveloperFlexibilitySection from "../../DeveloperFlexibilitySection"; // plasmic-import: aD1BzX0TEUk/component
import HitGroundRunningSection from "../../HitGroundRunningSection"; // plasmic-import: QePfxm7iE7o/component
import QuotesScroller from "../../QuotesScroller"; // plasmic-import: pDZtEWqRzT/component
import Testimonials from "../../Testimonials"; // plasmic-import: DJbGaLTtKAR/component
import BottomCtaSection from "../../BottomCtaSection"; // plasmic-import: MEBiyy_4nD/component
import Footer from "../../Footer"; // plasmic-import: 9R5YynM9KVp/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicDesignLandingPage.module.css"; // plasmic-import: 2sR5PRkxYAA/css

import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: VwsBlWFPux/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: GXuSKq-oqJ/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: rP3WBmFG-e/icon
import Icon15Icon from "./icons/PlasmicIcon__Icon15"; // plasmic-import: OsdZlmfSEe/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: UIRIe6a68A/icon
import Icon19Icon from "./icons/PlasmicIcon__Icon19"; // plasmic-import: ymoKOCfuo-/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon
import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: d8TOpAp1CP/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: YhhYiXTtXT/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: 5amV9exkN9/icon
import websiteHeroImageTinypngMdyXn0Auz from "./images/websiteHeroImageTinypng.png"; // plasmic-import: MdyXN0Auz/picture
import image7RU1GD3ENw from "./images/image7.svg"; // plasmic-import: rU1g-d3eNw/picture
import image56V53Izh8Nn from "./images/image56.png"; // plasmic-import: v53izh8NN/picture
import image55U1TabRso4 from "./images/image55.png"; // plasmic-import: u1TABRso4/picture
import sizePanelpng2LGgH04DpV from "./images/sizePanelpng2.png"; // plasmic-import: lGgH04dpV/picture
import frame901PngY1UxSbPn1 from "./images/frame901Png.png"; // plasmic-import: Y1uxSbPn1/picture
import frame905PngLzSJdD5RG from "./images/frame905Png.png"; // plasmic-import: lzSJdD5rG/picture
import designSystemFyeMyi6Nk from "./images/designSystem.png"; // plasmic-import: fyeMYI6Nk/picture
import image6Zk4QpLvJs from "./images/image6.svg"; // plasmic-import: ZK4QPLv_Js/picture
import image15CGjdWD3Lc from "./images/image15.svg"; // plasmic-import: CGjd_wD3lc/picture
import imageJEb6FwUqh2 from "./images/image.svg"; // plasmic-import: jEB6FWUqh2/picture
import image3Ye53PEpLv from "./images/image3.svg"; // plasmic-import: YE53p_epLv/picture
import image4SuzPkCmZfz from "./images/image4.svg"; // plasmic-import: SuzPKCmZFZ/picture
import image8Pjopgnvz6 from "./images/image8.svg"; // plasmic-import: PJOPGNVZ-6/picture
import image53LFnfKPfDu from "./images/image53.png"; // plasmic-import: LFnfKPfDu/picture
import image904Yo870MHj from "./images/image9.svg"; // plasmic-import: 04YO870mHJ/picture
import image11C1Emdq7MU7 from "./images/image11.svg"; // plasmic-import: C1Emdq7mU7/picture
import image12WiXt2Gdxg from "./images/image12.png"; // plasmic-import: WiXT2gdxg/picture

export type PlasmicDesignLandingPage__VariantMembers = {
  nextjs: "nextjs";
  gatsby: "gatsby";
  hideLevels: "hideLevels";
  plasmicLoader: "plasmicLoader";
};

export type PlasmicDesignLandingPage__VariantsArgs = {
  nextjs?: SingleBooleanChoiceArg<"nextjs">;
  gatsby?: SingleBooleanChoiceArg<"gatsby">;
  hideLevels?: SingleBooleanChoiceArg<"hideLevels">;
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
};

type VariantPropType = keyof PlasmicDesignLandingPage__VariantsArgs;
export const PlasmicDesignLandingPage__VariantProps =
  new Array<VariantPropType>("nextjs", "gatsby", "hideLevels", "plasmicLoader");

export type PlasmicDesignLandingPage__ArgsType = {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicDesignLandingPage__ArgsType;
export const PlasmicDesignLandingPage__ArgProps = new Array<ArgPropType>(
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicDesignLandingPage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  homeHero?: p.Flex<typeof HomeHero>;
  valuePropSection?: p.Flex<typeof ValuePropSection>;
  wireframeThroughProduction?: p.Flex<typeof SmallValuePropCard>;
  wireframeThroughProductionImage?: p.Flex<"img">;
  multiViewDesign?: p.Flex<typeof SmallValuePropCard>;
  multiViewDesignImage?: p.Flex<"img">;
  layoutForHumans?: p.Flex<typeof SmallValuePropCard>;
  valuePropCardsSection?: p.Flex<typeof ValuePropCardsSection>;
  valueA3?: p.Flex<typeof SmallValuePropCard>;
  valueA1?: p.Flex<typeof SmallValuePropCard>;
  makeAnImpressionImage?: p.Flex<"img">;
  valueB3?: p.Flex<typeof SmallValuePropCard>;
  linky?: p.Flex<typeof Linky>;
  belowFoldCtaRow?: p.Flex<typeof BelowFoldCtaRow>;
  first?: p.Flex<typeof ValuePropSection>;
  link?: p.Flex<"a">;
  buttonLink?: p.Flex<typeof ButtonLink>;
  container?: p.Flex<"div">;
  developerFlexibilitySection?: p.Flex<typeof DeveloperFlexibilitySection>;
  hitGroundRunningSection?: p.Flex<typeof HitGroundRunningSection>;
  quotesScroller?: p.Flex<typeof QuotesScroller>;
  bottomCtaSection?: p.Flex<typeof BottomCtaSection>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultDesignLandingPageProps {
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  nextjs?: SingleBooleanChoiceArg<"nextjs">;
  gatsby?: SingleBooleanChoiceArg<"gatsby">;
  hideLevels?: SingleBooleanChoiceArg<"hideLevels">;
  plasmicLoader?: SingleBooleanChoiceArg<"plasmicLoader">;
  className?: string;
}

function PlasmicDesignLandingPage__RenderFunc(props: {
  variants: PlasmicDesignLandingPage__VariantsArgs;
  args: PlasmicDesignLandingPage__ArgsType;
  overrides: PlasmicDesignLandingPage__OverridesType;
  dataFetches?: PlasmicDesignLandingPage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__global_theme_dark]: hasVariant(
          globalVariants,
          "theme",
          "dark"
        )
      })}
    >
      <Header
        data-plasmic-name={"header"}
        data-plasmic-override={overrides.header}
        className={classNames("__wab_instance", sty.header)}
      />

      <div
        data-plasmic-name={"body"}
        data-plasmic-override={overrides.body}
        className={classNames(defaultcss.all, sty.body)}
      >
        <HomeHero
          data-plasmic-name={"homeHero"}
          data-plasmic-override={overrides.homeHero}
          className={classNames("__wab_instance", sty.homeHero)}
          slot={p.renderPlasmicSlot({
            defaultContents: (
              <span>
                <React.Fragment>
                  {
                    "Layout for humans. Components and variants. Multi-view design. Tokens and mixins. Custom design systems. Seamless code integration. Zero lock-in. "
                  }
                </React.Fragment>
                <span style={{ fontWeight: 700 }}>
                  {"Ship to any production site or app."}
                </span>
              </span>
            ),
            value: args.slot2
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "The web design tool from the future is here.",
            value: args.slot
          })}
        </HomeHero>

        <ValuePropSection
          data-plasmic-name={"valuePropSection"}
          data-plasmic-override={overrides.valuePropSection}
          actionButton={null}
          backgroundImage={
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__ikGoG)}
              height={145 as const}
              role={"img"}
              src={image7RU1GD3ENw}
              width={300 as const}
            />
          }
          className={classNames("__wab_instance", sty.valuePropSection)}
          description={null}
          extraSlot={
            <React.Fragment>
              <SmallValuePropCard
                data-plasmic-name={"wireframeThroughProduction"}
                data-plasmic-override={overrides.wireframeThroughProduction}
                actionButton={null}
                className={classNames(
                  "__wab_instance",
                  sty.wireframeThroughProduction
                )}
                description={
                  <span>
                    <React.Fragment>
                      {
                        "Start with free-form drawing. Incrementally refine into production-ready layout, and "
                      }
                    </React.Fragment>
                    <span style={{ fontWeight: 700 }}>
                      {"stop rebuilding from scratch"}
                    </span>
                    <React.Fragment>{"."}</React.Fragment>
                  </span>
                }
                followupLink={null}
                icon={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__pEhBz
                    )}
                    colors={"lightCyanSolid" as const}
                  >
                    <Icon29Icon
                      className={classNames(defaultcss.all, sty.svg__tEv8)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                ltr={"ltr" as const}
                rightImage={"rightImage" as const}
                showcaseImage={
                  <img
                    data-plasmic-name={"wireframeThroughProductionImage"}
                    data-plasmic-override={
                      overrides.wireframeThroughProductionImage
                    }
                    alt={""}
                    className={classNames(
                      defaultcss.img,
                      sty.wireframeThroughProductionImage
                    )}
                    height={502 as const}
                    loading={"lazy" as const}
                    role={"img"}
                    src={image56V53Izh8Nn}
                    width={936 as const}
                  />
                }
              >
                {"One tool from wireframe through production."}
              </SmallValuePropCard>

              <SmallValuePropCard
                data-plasmic-name={"multiViewDesign"}
                data-plasmic-override={overrides.multiViewDesign}
                actionButton={null}
                className={classNames("__wab_instance", sty.multiViewDesign)}
                description={
                  <span>
                    <span style={{ fontWeight: 700 }}>{"Simultaneously"}</span>
                    <React.Fragment>
                      {
                        " design across screen sizes, variants, and other contexts to iterate faster than ever."
                      }
                    </React.Fragment>
                  </span>
                }
                followupLink={null}
                icon={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__z1Kmq
                    )}
                    colors={"lightCyanSolid" as const}
                  >
                    <Icon36Icon
                      className={classNames(defaultcss.all, sty.svg___4E4A9)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                ltr={"ltr" as const}
                reverse={"reverse" as const}
                rightImage={"rightImage" as const}
                showcaseImage={
                  <img
                    data-plasmic-name={"multiViewDesignImage"}
                    data-plasmic-override={overrides.multiViewDesignImage}
                    alt={""}
                    className={classNames(
                      defaultcss.img,
                      sty.multiViewDesignImage
                    )}
                    height={525 as const}
                    loading={"lazy" as const}
                    role={"img"}
                    src={image55U1TabRso4}
                    width={953 as const}
                  />
                }
              >
                {"Multi-view design."}
              </SmallValuePropCard>

              <SmallValuePropCard
                data-plasmic-name={"layoutForHumans"}
                data-plasmic-override={overrides.layoutForHumans}
                actionButton={null}
                className={classNames("__wab_instance", sty.layoutForHumans)}
                description={
                  <span>
                    <React.Fragment>{"Use a simple but "}</React.Fragment>
                    <span style={{ fontWeight: 700 }}>{"full-featured"}</span>
                    <React.Fragment>
                      {
                        " layout system to easily create the exact responsive design you want."
                      }
                    </React.Fragment>
                  </span>
                }
                followupLink={null}
                icon={
                  <GraphicIcon
                    className={classNames(
                      "__wab_instance",
                      sty.graphicIcon__i1H24
                    )}
                    colors={"lightCyanSolid" as const}
                  >
                    <Icon23Icon
                      className={classNames(defaultcss.all, sty.svg__cxgxo)}
                      role={"img"}
                    />
                  </GraphicIcon>
                }
                ltr={"ltr" as const}
                rightImage={"rightImage" as const}
                showcaseImage={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__kHnuo)}
                    height={245 as const}
                    loading={"lazy" as const}
                    role={"img"}
                    src={sizePanelpng2LGgH04DpV}
                    width={427 as const}
                  />
                }
              >
                {"Layout for humans."}
              </SmallValuePropCard>
            </React.Fragment>
          }
          extras={["withExtraSlot1", "centerAligned"]}
          header={null}
          icon={null}
          slot62={
            "Whether you use Typescript or ES6, Gatsby or Next, Webpack or Parcel. Start with a single component and work up to an entire screen."
          }
          title={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__hp1S8
              )}
            >
              {"Productivity at the speed of thought."}
            </div>
          }
        />

        <ValuePropCardsSection
          data-plasmic-name={"valuePropCardsSection"}
          data-plasmic-override={overrides.valuePropCardsSection}
          backgrounds={"white" as const}
          className={classNames("__wab_instance", sty.valuePropCardsSection)}
          slot={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__donkq
              )}
            >
              {"Unparalleled power at scale."}
            </div>
          }
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__rmrFy)}
          >
            <SmallValuePropCard
              data-plasmic-name={"valueA3"}
              data-plasmic-override={overrides.valueA3}
              actionButton={null}
              className={classNames("__wab_instance", sty.valueA3)}
              description={
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__d527J)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__nL4Wv
                    )}
                  >
                    {
                      "Build with greater speed and consistency using concepts like design tokens, mixins, components, and variants."
                    }
                  </div>
                </p.Stack>
              }
              followupLink={null}
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon__pYiZs
                  )}
                  colors={"lightCoralSolid" as const}
                >
                  <Icon15Icon
                    className={classNames(defaultcss.all, sty.svg__vxGml)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              reverse={"reverse" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___5Ogx0)}
                  height={1528 as const}
                  loading={"lazy" as const}
                  role={"img"}
                  src={frame901PngY1UxSbPn1}
                  width={2352 as const}
                />
              }
            >
              {"Foundations that scale."}
            </SmallValuePropCard>

            <SmallValuePropCard
              data-plasmic-name={"valueA1"}
              data-plasmic-override={overrides.valueA1}
              actionButton={null}
              description={
                "Compose pages with full visual control. Add rich interactive effects and transitions."
              }
              followupLink={null}
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon__eke8Y
                  )}
                  colors={"lightCoralSolid" as const}
                >
                  <Icon28Icon
                    className={classNames(defaultcss.all, sty.svg__pPgOx)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <img
                  data-plasmic-name={"makeAnImpressionImage"}
                  data-plasmic-override={overrides.makeAnImpressionImage}
                  alt={""}
                  className={classNames(
                    defaultcss.img,
                    sty.makeAnImpressionImage
                  )}
                  height={956 as const}
                  loading={"lazy" as const}
                  role={"img"}
                  src={frame905PngLzSJdD5RG}
                  width={1600 as const}
                />
              }
            >
              {"Make an impression."}
            </SmallValuePropCard>

            <SmallValuePropCard
              data-plasmic-name={"valueB3"}
              data-plasmic-override={overrides.valueB3}
              actionButton={null}
              className={classNames("__wab_instance", sty.valueB3)}
              description={
                "Create fully accessible, bespoke design systems without a single line of code, using the Plume meta design system."
              }
              followupLink={
                <Linky
                  data-plasmic-name={"linky"}
                  data-plasmic-override={overrides.linky}
                  className={classNames("__wab_instance", sty.linky)}
                  link={"/learn/plume/" as const}
                  style={["noPadding"]}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__lCfk6
                    )}
                  >
                    {"Learn about Plume ➔"}
                  </div>
                </Linky>
              }
              icon={
                <GraphicIcon
                  className={classNames(
                    "__wab_instance",
                    sty.graphicIcon__sMt6Z
                  )}
                  colors={"lightCoralSolid" as const}
                >
                  <Icon19Icon
                    className={classNames(defaultcss.all, sty.svg__pMyv)}
                    role={"img"}
                  />
                </GraphicIcon>
              }
              ltr={"ltr" as const}
              reverse={"reverse" as const}
              rightImage={"rightImage" as const}
              showcaseImage={
                <div className={classNames(defaultcss.all, sty.box__ynomn)}>
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__m0De8)}
                    height={766 as const}
                    loading={"lazy" as const}
                    role={"img"}
                    src={designSystemFyeMyi6Nk}
                    width={1952 as const}
                  />
                </div>
              }
            >
              {"Custom design systems."}
            </SmallValuePropCard>
          </p.Stack>
        </ValuePropCardsSection>

        <BelowFoldCtaRow
          data-plasmic-name={"belowFoldCtaRow"}
          data-plasmic-override={overrides.belowFoldCtaRow}
          className={classNames("__wab_instance", sty.belowFoldCtaRow, {
            [sty.belowFoldCtaRow__hideLevels]: hasVariant(
              variants,
              "hideLevels",
              "hideLevels"
            )
          })}
          hideLevels={
            hasVariant(variants, "hideLevels", "hideLevels")
              ? ("hideLevels" as const)
              : undefined
          }
        />

        {false ? (
          <ValuePropSection
            data-plasmic-name={"first"}
            data-plasmic-override={overrides.first}
            actionButton={
              <a
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(defaultcss.all, sty.link)}
                href={"/learn/" as const}
              >
                <ButtonLink
                  data-plasmic-name={"buttonLink"}
                  data-plasmic-override={overrides.buttonLink}
                  href={"/learn/" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__sTxQh)}
                      role={"img"}
                    />
                  }
                  label={"Learn more"}
                />
              </a>
            }
            backgroundColor={"blue" as const}
            backgroundImage={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__mQf1Q)}
                height={95 as const}
                role={"img"}
                src={image6Zk4QpLvJs}
                width={300 as const}
              />
            }
            className={classNames("__wab_instance", sty.first)}
            description={
              "Plasmic Studio works in the Chrome and Firefox web browsers and accessible on macOS, Linux, and Windows."
            }
            extraSlot={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__ivd6B)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box___5DAKm)}
                >
                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__cbyG
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon21Icon
                          className={classNames(
                            defaultcss.all,
                            sty.svg___7M5Ch
                          )}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    {
                      "Whether you’re a developer, designer, or content creative, Plasmic Studio scales to your desired level of control."
                    }
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__zCzj9)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon___5Drwh
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon20Icon
                          className={classNames(defaultcss.all, sty.svg__ocGkG)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__vazA1
                      )}
                    >
                      {
                        "Free up developers and iterate faster. Or accelerate your own development cycles."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__ntpUj)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__xbIvP
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon22Icon
                          className={classNames(defaultcss.all, sty.svg__efUO)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__nxLLs
                      )}
                    >
                      {
                        "Keep everyone on the same page, with a single source of truth for design and production."
                      }
                    </div>
                  </ValuePropListItem>

                  <Divider
                    className={classNames("__wab_instance", sty.divider__mzZqo)}
                  />

                  <ValuePropListItem
                    slot={
                      <GraphicIcon
                        className={classNames(
                          "__wab_instance",
                          sty.graphicIcon__uLbGp
                        )}
                        colors={"lightBlueSolid" as const}
                      >
                        <Icon23Icon
                          className={classNames(defaultcss.all, sty.svg__vb4Zs)}
                          role={"img"}
                        />
                      </GraphicIcon>
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___6CZl2
                      )}
                    >
                      {
                        "Use an intuitive layout system built for humans to create complex responsive pages."
                      }
                    </div>
                  </ValuePropListItem>
                </p.Stack>
              </p.Stack>
            }
            extras={["withExtraSlot1", "centerAligned"]}
            header={null}
            icon={null}
            title={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__ci9Se,
                  {
                    [sty.box__global_theme_altHeadlineFont__ci9SeFQkvX]:
                      hasVariant(globalVariants, "theme", "altHeadlineFont")
                  }
                )}
              >
                <span>
                  <React.Fragment>
                    {"Make your product editable to "}
                  </React.Fragment>
                  <span style={{ textDecoration: "underline" }}>
                    {"anyone"}
                  </span>
                  <React.Fragment>{"."}</React.Fragment>
                </span>
              </div>
            }
          />
        ) : null}
        {false ? (
          <section className={classNames(defaultcss.all, sty.section___7SPz1)}>
            <div className={classNames(defaultcss.all, sty.box__kTL)}>
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__ftbBm)}
                height={150 as const}
                role={"img"}
                src={image15CGjdWD3Lc}
                width={205 as const}
              />
            </div>
          </section>
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: (
            <IntegrateAnywhereSection
              className={classNames(
                "__wab_instance",
                sty.integrateAnywhereSection__ori4M
              )}
            />
          ),

          value: args.slot3
        })}

        <section className={classNames(defaultcss.all, sty.section__kjcNq)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(defaultcss.all, sty.container, {
              [sty.container__gatsby]: hasVariant(variants, "gatsby", "gatsby"),
              [sty.container__nextjs]: hasVariant(variants, "nextjs", "nextjs")
            })}
          >
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__zJxSu)}
              height={126 as const}
              role={"img"}
              src={imageJEb6FwUqh2}
              width={300 as const}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__tFkbk)}
              height={76 as const}
              role={"img"}
              src={image3Ye53PEpLv}
              width={300 as const}
            />

            {(hasVariant(variants, "nextjs", "nextjs") ? false : true) ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__qbEiE, {
                  [sty.img__nextjs__qbEiEaluYq]: hasVariant(
                    variants,
                    "nextjs",
                    "nextjs"
                  )
                })}
                height={79 as const}
                role={"img"}
                src={image4SuzPkCmZfz}
                width={300 as const}
              />
            ) : null}
            {(hasVariant(variants, "gatsby", "gatsby") ? false : true) ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__oHnca, {
                  [sty.img__gatsby__oHncaCdEEy]: hasVariant(
                    variants,
                    "gatsby",
                    "gatsby"
                  ),
                  [sty.img__nextjs__oHncAaluYq]: hasVariant(
                    variants,
                    "nextjs",
                    "nextjs"
                  )
                })}
                height={150 as const}
                role={"img"}
                src={image8Pjopgnvz6}
                width={250 as const}
              />
            ) : null}

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__xTg9J, {
                [sty.img__gatsby__xTg9JCdEEy]: hasVariant(
                  variants,
                  "gatsby",
                  "gatsby"
                ),
                [sty.img__nextjs__xTg9JaluYq]: hasVariant(
                  variants,
                  "nextjs",
                  "nextjs"
                )
              })}
              height={195 as const}
              role={"img"}
              src={image53LFnfKPfDu}
              width={670 as const}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__xHliy)}
              height={82 as const}
              role={"img"}
              src={image904Yo870MHj}
              width={300 as const}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__lpg5G)}
              height={68 as const}
              role={"img"}
              src={image11C1Emdq7MU7}
              width={300 as const}
            />

            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__rXX9)}
              height={623 as const}
              role={"img"}
              src={image12WiXt2Gdxg}
              width={2600 as const}
            />
          </p.Stack>
        </section>

        <DeveloperFlexibilitySection
          data-plasmic-name={"developerFlexibilitySection"}
          data-plasmic-override={overrides.developerFlexibilitySection}
          className={classNames(
            "__wab_instance",
            sty.developerFlexibilitySection,
            {
              [sty.developerFlexibilitySection__plasmicLoader]: hasVariant(
                variants,
                "plasmicLoader",
                "plasmicLoader"
              )
            }
          )}
          plasmicLoader={
            hasVariant(variants, "plasmicLoader", "plasmicLoader")
              ? ("plasmicLoader" as const)
              : undefined
          }
        />

        <HitGroundRunningSection
          data-plasmic-name={"hitGroundRunningSection"}
          data-plasmic-override={overrides.hitGroundRunningSection}
          className={classNames("__wab_instance", sty.hitGroundRunningSection)}
        >
          {"Starting on something new? Generate a full codebase from scratch."}
        </HitGroundRunningSection>

        <QuotesScroller
          data-plasmic-name={"quotesScroller"}
          data-plasmic-override={overrides.quotesScroller}
          className={classNames("__wab_instance", sty.quotesScroller)}
        />

        <BottomCtaSection
          data-plasmic-name={"bottomCtaSection"}
          data-plasmic-override={overrides.bottomCtaSection}
          className={classNames("__wab_instance", sty.bottomCtaSection)}
        />
      </div>

      <Footer
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames("__wab_instance", sty.footer)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "body",
    "homeHero",
    "valuePropSection",
    "wireframeThroughProduction",
    "wireframeThroughProductionImage",
    "multiViewDesign",
    "multiViewDesignImage",
    "layoutForHumans",
    "valuePropCardsSection",
    "valueA3",
    "valueA1",
    "makeAnImpressionImage",
    "valueB3",
    "linky",
    "belowFoldCtaRow",
    "first",
    "link",
    "buttonLink",
    "container",
    "developerFlexibilitySection",
    "hitGroundRunningSection",
    "quotesScroller",
    "bottomCtaSection",
    "footer"
  ],
  header: ["header"],
  body: [
    "body",
    "homeHero",
    "valuePropSection",
    "wireframeThroughProduction",
    "wireframeThroughProductionImage",
    "multiViewDesign",
    "multiViewDesignImage",
    "layoutForHumans",
    "valuePropCardsSection",
    "valueA3",
    "valueA1",
    "makeAnImpressionImage",
    "valueB3",
    "linky",
    "belowFoldCtaRow",
    "first",
    "link",
    "buttonLink",
    "container",
    "developerFlexibilitySection",
    "hitGroundRunningSection",
    "quotesScroller",
    "bottomCtaSection"
  ],
  homeHero: ["homeHero"],
  valuePropSection: [
    "valuePropSection",
    "wireframeThroughProduction",
    "wireframeThroughProductionImage",
    "multiViewDesign",
    "multiViewDesignImage",
    "layoutForHumans"
  ],
  wireframeThroughProduction: [
    "wireframeThroughProduction",
    "wireframeThroughProductionImage"
  ],
  wireframeThroughProductionImage: ["wireframeThroughProductionImage"],
  multiViewDesign: ["multiViewDesign", "multiViewDesignImage"],
  multiViewDesignImage: ["multiViewDesignImage"],
  layoutForHumans: ["layoutForHumans"],
  valuePropCardsSection: [
    "valuePropCardsSection",
    "valueA3",
    "valueA1",
    "makeAnImpressionImage",
    "valueB3",
    "linky"
  ],
  valueA3: ["valueA3"],
  valueA1: ["valueA1", "makeAnImpressionImage"],
  makeAnImpressionImage: ["makeAnImpressionImage"],
  valueB3: ["valueB3", "linky"],
  linky: ["linky"],
  belowFoldCtaRow: ["belowFoldCtaRow"],
  first: ["first", "link", "buttonLink"],
  link: ["link", "buttonLink"],
  buttonLink: ["buttonLink"],
  container: ["container"],
  developerFlexibilitySection: ["developerFlexibilitySection"],
  hitGroundRunningSection: ["hitGroundRunningSection"],
  quotesScroller: ["quotesScroller"],
  bottomCtaSection: ["bottomCtaSection"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  body: "div";
  homeHero: typeof HomeHero;
  valuePropSection: typeof ValuePropSection;
  wireframeThroughProduction: typeof SmallValuePropCard;
  wireframeThroughProductionImage: "img";
  multiViewDesign: typeof SmallValuePropCard;
  multiViewDesignImage: "img";
  layoutForHumans: typeof SmallValuePropCard;
  valuePropCardsSection: typeof ValuePropCardsSection;
  valueA3: typeof SmallValuePropCard;
  valueA1: typeof SmallValuePropCard;
  makeAnImpressionImage: "img";
  valueB3: typeof SmallValuePropCard;
  linky: typeof Linky;
  belowFoldCtaRow: typeof BelowFoldCtaRow;
  first: typeof ValuePropSection;
  link: "a";
  buttonLink: typeof ButtonLink;
  container: "div";
  developerFlexibilitySection: typeof DeveloperFlexibilitySection;
  hitGroundRunningSection: typeof HitGroundRunningSection;
  quotesScroller: typeof QuotesScroller;
  bottomCtaSection: typeof BottomCtaSection;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesignLandingPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesignLandingPage__VariantsArgs;
    args?: PlasmicDesignLandingPage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicDesignLandingPage__Fetches;
  } & Omit<PlasmicDesignLandingPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDesignLandingPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDesignLandingPage__ArgProps,
      internalVariantPropNames: PlasmicDesignLandingPage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicDesignLandingPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesignLandingPage";
  } else {
    func.displayName = `PlasmicDesignLandingPage.${nodeName}`;
  }
  return func;
}

export const PlasmicDesignLandingPage = Object.assign(
  // Top-level PlasmicDesignLandingPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    homeHero: makeNodeComponent("homeHero"),
    valuePropSection: makeNodeComponent("valuePropSection"),
    wireframeThroughProduction: makeNodeComponent("wireframeThroughProduction"),
    wireframeThroughProductionImage: makeNodeComponent(
      "wireframeThroughProductionImage"
    ),
    multiViewDesign: makeNodeComponent("multiViewDesign"),
    multiViewDesignImage: makeNodeComponent("multiViewDesignImage"),
    layoutForHumans: makeNodeComponent("layoutForHumans"),
    valuePropCardsSection: makeNodeComponent("valuePropCardsSection"),
    valueA3: makeNodeComponent("valueA3"),
    valueA1: makeNodeComponent("valueA1"),
    makeAnImpressionImage: makeNodeComponent("makeAnImpressionImage"),
    valueB3: makeNodeComponent("valueB3"),
    linky: makeNodeComponent("linky"),
    belowFoldCtaRow: makeNodeComponent("belowFoldCtaRow"),
    first: makeNodeComponent("first"),
    link: makeNodeComponent("link"),
    buttonLink: makeNodeComponent("buttonLink"),
    container: makeNodeComponent("container"),
    developerFlexibilitySection: makeNodeComponent(
      "developerFlexibilitySection"
    ),
    hitGroundRunningSection: makeNodeComponent("hitGroundRunningSection"),
    quotesScroller: makeNodeComponent("quotesScroller"),
    bottomCtaSection: makeNodeComponent("bottomCtaSection"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicDesignLandingPage
    internalVariantProps: PlasmicDesignLandingPage__VariantProps,
    internalArgProps: PlasmicDesignLandingPage__ArgProps
  }
);

export default PlasmicDesignLandingPage;
/* prettier-ignore-end */
