// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: xiF82lygrKb
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: vtgKf8zu4R/component
import PriceTier from "../../PriceTier"; // plasmic-import: AapVVGU4iu/component
import Bullet from "../../Bullet"; // plasmic-import: 1LCbIKy0Mz/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component
import PricingFeatureTable from "../../PricingFeatureTable"; // plasmic-import: 0JMC2aEx9m/component
import Footer from "../../Footer"; // plasmic-import: 9R5YynM9KVp/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicPricing.module.css"; // plasmic-import: xiF82lygrKb/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: f4GO4W3yZm/icon

export type PlasmicPricing__VariantMembers = {};

export type PlasmicPricing__VariantsArgs = {};
type VariantPropType = keyof PlasmicPricing__VariantsArgs;
export const PlasmicPricing__VariantProps = new Array<VariantPropType>();

export type PlasmicPricing__ArgsType = {};
type ArgPropType = keyof PlasmicPricing__ArgsType;
export const PlasmicPricing__ArgProps = new Array<ArgPropType>();

export type PlasmicPricing__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  body?: p.Flex<"div">;
  freeTier?: p.Flex<typeof PriceTier>;
  proTier?: p.Flex<typeof PriceTier>;
  teamTier?: p.Flex<typeof PriceTier>;
  enterpriseTier?: p.Flex<typeof PriceTier>;
  pricingFeatureTable?: p.Flex<typeof PricingFeatureTable>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultPricingProps {
  className?: string;
}

function PlasmicPricing__RenderFunc(props: {
  variants: PlasmicPricing__VariantsArgs;
  args: PlasmicPricing__ArgsType;
  overrides: PlasmicPricing__OverridesType;
  dataFetches?: PlasmicPricing__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme(),
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header, {
              [sty.header__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"body"}
            data-plasmic-override={overrides.body}
            hasGap={true}
            className={classNames(defaultcss.all, sty.body, {
              [sty.body__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.box___1GN7Z)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__jqq6B
                )}
              >
                {"Pricing"}
              </div>
            </div>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__wfDjq)}
            >
              <PriceTier
                data-plasmic-name={"freeTier"}
                data-plasmic-override={overrides.freeTier}
                className={classNames("__wab_instance", sty.freeTier)}
                subprice={" "}
                title={"Starter"}
                valueProps={
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__s4Rc)}
                  >
                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__aLxiZ
                      )}
                    >
                      {"Unlimited projects"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__xd3U8
                      )}
                    >
                      {"Unlimited code-gen"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__xc8Op
                      )}
                    >
                      {"Up to 3 workspaces"}
                    </Bullet>

                    <Bullet
                      className={classNames("__wab_instance", sty.bullet__h7P6)}
                    >
                      {"Up to 2 editors per workspace"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__cp3Wo
                      )}
                    >
                      {"Unlimited viewers"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__wTqcV
                      )}
                    >
                      {"30-day version history"}
                    </Bullet>
                  </p.Stack>
                }
              >
                <ButtonLink
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLink___6HK6G
                  )}
                  href={"https://plasmic.app/signup" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__fm2L)}
                      role={"img"}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__fJeuH
                      )}
                    >
                      {"Get started"}
                    </div>
                  }
                  type={["purpleSolid"]}
                />
              </PriceTier>

              <PriceTier
                data-plasmic-name={"proTier"}
                data-plasmic-override={overrides.proTier}
                className={classNames("__wab_instance", sty.proTier)}
                price={"$10"}
                subprice={"per user/month"}
                title={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__ozQf
                    )}
                  >
                    {"Professional"}
                  </div>
                }
                valueProps={
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__ueITu)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__fQLn
                      )}
                    >
                      {"Everything in Starter, plusâ€¦"}
                    </div>

                    <Bullet
                      className={classNames("__wab_instance", sty.bullet__eB1F)}
                    >
                      {"Unlimited workspaces"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__c33Wm
                      )}
                    >
                      {"Up to 5 editors per workspace"}
                    </Bullet>
                  </p.Stack>
                }
              >
                <ButtonLink
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLink__t6N8R
                  )}
                  href={"https://plasmic.app/pro-team-contact" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg__oyBna)}
                      role={"img"}
                    />
                  }
                  label={"Sign up for the beta"}
                  type={["coralSolid"]}
                />
              </PriceTier>

              <PriceTier
                data-plasmic-name={"teamTier"}
                data-plasmic-override={overrides.teamTier}
                className={classNames("__wab_instance", sty.teamTier)}
                price={"$12"}
                title={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__yx1XI
                    )}
                  >
                    {"Team"}
                  </div>
                }
                valueProps={
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box___6AWg)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__vyQns
                      )}
                    >
                      {"Everything in Pro, plusâ€¦"}
                    </div>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__sZyul
                      )}
                    >
                      {"Unlimited collaborators"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__fpCvP
                      )}
                    >
                      {"Admin roles for workspaces"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet___0CEaq
                      )}
                    >
                      {"Team permission groups"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__kzRJm
                      )}
                    >
                      {"Advanced permissioning rules"}
                    </Bullet>
                  </p.Stack>
                }
              >
                <ButtonLink
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLink__svHod
                  )}
                  href={"https://plasmic.app/pro-team-contact" as const}
                  icon={
                    <IconIcon
                      className={classNames(defaultcss.all, sty.svg___8ItZe)}
                      role={"img"}
                    />
                  }
                  label={"Sign up for the beta"}
                  type={["greenSolid"]}
                />
              </PriceTier>

              <PriceTier
                data-plasmic-name={"enterpriseTier"}
                data-plasmic-override={overrides.enterpriseTier}
                className={classNames("__wab_instance", sty.enterpriseTier)}
                price={"Customized"}
                subprice={"Annual billing only"}
                title={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__sR8Lx
                    )}
                  >
                    {"Enterprise"}
                  </div>
                }
                valueProps={
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box___9O6J3)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___2NeFn
                      )}
                    >
                      {"Everything in Team, plusâ€¦"}
                    </div>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__d1Jkb
                      )}
                    >
                      {"Premium support"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet___2C3Vk
                      )}
                    >
                      {"Custom feature priority"}
                    </Bullet>

                    <Bullet
                      className={classNames("__wab_instance", sty.bullet__tU5W)}
                    >
                      {"Uptime SLA"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__hif87
                      )}
                    >
                      {"Centralized admin"}
                    </Bullet>

                    <Bullet
                      className={classNames(
                        "__wab_instance",
                        sty.bullet__u01EL
                      )}
                    >
                      {"Unlimited version history"}
                    </Bullet>
                  </p.Stack>
                }
              >
                <ButtonLink
                  className={classNames(
                    "__wab_instance",
                    sty.buttonLink__xQw6H
                  )}
                  href={"https://plasmic.app/enterprise-contact" as const}
                  icon={
                    <Icon8Icon
                      className={classNames(defaultcss.all, sty.svg__okg4P)}
                      role={"img"}
                    />
                  }
                  label={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___8TOi9
                      )}
                    >
                      {"Contact us"}
                    </div>
                  }
                  type={["cyanSolid"]}
                />
              </PriceTier>
            </p.Stack>

            <PricingFeatureTable
              data-plasmic-name={"pricingFeatureTable"}
              data-plasmic-override={overrides.pricingFeatureTable}
              className={classNames("__wab_instance", sty.pricingFeatureTable)}
            />
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer, {
              [sty.footer__global_theme_dark]: hasVariant(
                globalVariants,
                "theme",
                "dark"
              )
            })}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "body",
    "freeTier",
    "proTier",
    "teamTier",
    "enterpriseTier",
    "pricingFeatureTable",
    "footer"
  ],
  header: ["header"],
  body: [
    "body",
    "freeTier",
    "proTier",
    "teamTier",
    "enterpriseTier",
    "pricingFeatureTable"
  ],
  freeTier: ["freeTier"],
  proTier: ["proTier"],
  teamTier: ["teamTier"],
  enterpriseTier: ["enterpriseTier"],
  pricingFeatureTable: ["pricingFeatureTable"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  body: "div";
  freeTier: typeof PriceTier;
  proTier: typeof PriceTier;
  teamTier: typeof PriceTier;
  enterpriseTier: typeof PriceTier;
  pricingFeatureTable: typeof PricingFeatureTable;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricing__VariantsArgs;
    args?: PlasmicPricing__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPricing__Fetches;
  } & Omit<PlasmicPricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPricing__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricing__ArgProps,
      internalVariantPropNames: PlasmicPricing__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPricing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricing";
  } else {
    func.displayName = `PlasmicPricing.${nodeName}`;
  }
  return func;
}

export const PlasmicPricing = Object.assign(
  // Top-level PlasmicPricing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    body: makeNodeComponent("body"),
    freeTier: makeNodeComponent("freeTier"),
    proTier: makeNodeComponent("proTier"),
    teamTier: makeNodeComponent("teamTier"),
    enterpriseTier: makeNodeComponent("enterpriseTier"),
    pricingFeatureTable: makeNodeComponent("pricingFeatureTable"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicPricing
    internalVariantProps: PlasmicPricing__VariantProps,
    internalArgProps: PlasmicPricing__ArgProps
  }
);

export default PlasmicPricing;
/* prettier-ignore-end */
