// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: G_9dpcpzVW
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CommonLandingPage from "../../CommonLandingPage"; // plasmic-import: HzhMCW_ztWQ/component
import IntegrateAnywhereSection from "../../IntegrateAnywhereSection"; // plasmic-import: dxALvsaixcT/component
import ValuePropListItem from "../../ValuePropListItem"; // plasmic-import: lJppbKgSOw/component
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import Divider from "../../Divider"; // plasmic-import: SQHouqji3_/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicVisualCms.module.css"; // plasmic-import: G_9dpcpzVW/css

import Icon21Icon from "./icons/PlasmicIcon__Icon21"; // plasmic-import: d8TOpAp1CP/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: rP3WBmFG-e/icon
import Icon20Icon from "./icons/PlasmicIcon__Icon20"; // plasmic-import: YhhYiXTtXT/icon

export type PlasmicVisualCms__VariantMembers = {};

export type PlasmicVisualCms__VariantsArgs = {};
type VariantPropType = keyof PlasmicVisualCms__VariantsArgs;
export const PlasmicVisualCms__VariantProps = new Array<VariantPropType>();

export type PlasmicVisualCms__ArgsType = {};
type ArgPropType = keyof PlasmicVisualCms__ArgsType;
export const PlasmicVisualCms__ArgProps = new Array<ArgPropType>();

export type PlasmicVisualCms__OverridesType = {
  root?: p.Flex<"div">;
  commonLandingPage?: p.Flex<typeof CommonLandingPage>;
  integrateAnywhereSection?: p.Flex<typeof IntegrateAnywhereSection>;
};

export interface DefaultVisualCmsProps {
  className?: string;
}

function PlasmicVisualCms__RenderFunc(props: {
  variants: PlasmicVisualCms__VariantsArgs;
  args: PlasmicVisualCms__ArgsType;
  overrides: PlasmicVisualCms__OverridesType;
  dataFetches?: PlasmicVisualCms__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <CommonLandingPage
            data-plasmic-name={"commonLandingPage"}
            data-plasmic-override={overrides.commonLandingPage}
            className={classNames("__wab_instance", sty.commonLandingPage)}
            integrationSection={
              <IntegrateAnywhereSection
                data-plasmic-name={"integrateAnywhereSection"}
                data-plasmic-override={overrides.integrateAnywhereSection}
                className={classNames(
                  "__wab_instance",
                  sty.integrateAnywhereSection
                )}
                slot={
                  "Perfectly complements and works with any headless schema-based CMS."
                }
                slot2={"Augment your CMS strategy."}
              >
                {
                  "Freedom to pick any hosting, framework, analytics—the full stack."
                }
              </IntegrateAnywhereSection>
            }
            plasmicLoader={"plasmicLoader" as const}
            slot={
              <span>
                <React.Fragment>
                  {"Launch beautiful digital experiences ⚡️ "}
                </React.Fragment>
                <span style={{ fontStyle: "italic" }}>{"fast"}</span>
                <React.Fragment>{"."}</React.Fragment>
              </span>
            }
            slot2={
              <span>
                <React.Fragment>
                  {
                    "A headless visual CMS with a powerful no-code builder for creating pages and free-form content. "
                  }
                </React.Fragment>
                <span style={{ fontWeight: 700 }}>{"Unblock your team"}</span>
                <React.Fragment>
                  {", and empower anyone to ship."}
                </React.Fragment>
              </span>
            }
            slot4={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box___8Rmy)}
              >
                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__cDxHv
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon21Icon
                        className={classNames(defaultcss.all, sty.svg__vYtp0)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"No-code autonomy."}
                >
                  {
                    "Enable non-developers to publish pages and free-form content."
                  }
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__v831Y)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__rzJc8
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon23Icon
                        className={classNames(defaultcss.all, sty.svg__eOndH)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"The most flexible CMS."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___2OCtF
                    )}
                  >
                    <span>
                      <React.Fragment>
                        {"Create full pages and "}
                      </React.Fragment>
                      <span style={{ fontWeight: 700 }}>{"free-form"}</span>
                      <React.Fragment>
                        {
                          " content, for when schemas and templates can't keep up."
                        }
                      </React.Fragment>
                    </span>
                  </div>
                </ValuePropListItem>

                <Divider
                  className={classNames("__wab_instance", sty.divider__gXNl)}
                />

                <ValuePropListItem
                  slot={
                    <GraphicIcon
                      className={classNames(
                        "__wab_instance",
                        sty.graphicIcon__zaTcA
                      )}
                      colors={"lightBlueSolid" as const}
                    >
                      <Icon20Icon
                        className={classNames(defaultcss.all, sty.svg__aZRb9)}
                        role={"img"}
                      />
                    </GraphicIcon>
                  }
                  slot2={"Free up developers."}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___199P
                    )}
                  >
                    {
                      "Let developers focus on code, not pixel-pushing. Or use Plasmic to accelerate frontend development."
                    }
                  </div>
                </ValuePropListItem>
              </p.Stack>
            }
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__rTmCm
              )}
            >
              {"Finally, a CMS that offers true autonomy."}
            </div>
          </CommonLandingPage>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "commonLandingPage", "integrateAnywhereSection"],
  commonLandingPage: ["commonLandingPage", "integrateAnywhereSection"],
  integrateAnywhereSection: ["integrateAnywhereSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  commonLandingPage: typeof CommonLandingPage;
  integrateAnywhereSection: typeof IntegrateAnywhereSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicVisualCms__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicVisualCms__VariantsArgs;
    args?: PlasmicVisualCms__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicVisualCms__Fetches;
  } & Omit<PlasmicVisualCms__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicVisualCms__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicVisualCms__ArgProps,
      internalVariantPropNames: PlasmicVisualCms__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicVisualCms__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicVisualCms";
  } else {
    func.displayName = `PlasmicVisualCms.${nodeName}`;
  }
  return func;
}

export const PlasmicVisualCms = Object.assign(
  // Top-level PlasmicVisualCms renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    commonLandingPage: makeNodeComponent("commonLandingPage"),
    integrateAnywhereSection: makeNodeComponent("integrateAnywhereSection"),

    // Metadata about props expected for PlasmicVisualCms
    internalVariantProps: PlasmicVisualCms__VariantProps,
    internalArgProps: PlasmicVisualCms__ArgProps
  }
);

export default PlasmicVisualCms;
/* prettier-ignore-end */
