// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: MEBiyy_4nD
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component

import { ThemeValue, useTheme } from "./PlasmicGlobalVariant__Theme"; // plasmic-import: 9MzawQbD5r/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicBottomCtaSection.module.css"; // plasmic-import: MEBiyy_4nD/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: f4GO4W3yZm/icon

export type PlasmicBottomCtaSection__VariantMembers = {};

export type PlasmicBottomCtaSection__VariantsArgs = {};
type VariantPropType = keyof PlasmicBottomCtaSection__VariantsArgs;
export const PlasmicBottomCtaSection__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBottomCtaSection__ArgsType = {};
type ArgPropType = keyof PlasmicBottomCtaSection__ArgsType;
export const PlasmicBottomCtaSection__ArgProps = new Array<ArgPropType>();

export type PlasmicBottomCtaSection__OverridesType = {
  root?: p.Flex<"section">;
  container23?: p.Flex<"div">;
  buttonLink?: p.Flex<typeof ButtonLink>;
  svg?: p.Flex<"svg">;
};

export interface DefaultBottomCtaSectionProps {
  className?: string;
}

function PlasmicBottomCtaSection__RenderFunc(props: {
  variants: PlasmicBottomCtaSection__VariantsArgs;
  args: PlasmicBottomCtaSection__ArgsType;
  overrides: PlasmicBottomCtaSection__OverridesType;
  dataFetches?: PlasmicBottomCtaSection__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    theme: useTheme()
  });

  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"container23"}
        data-plasmic-override={overrides.container23}
        hasGap={true}
        className={classNames(defaultcss.all, sty.container23)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__q0IA)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box___2M4Mn,
              {
                [sty.box__global_theme_altHeadlineFont___2M4MnFQkvX]:
                  hasVariant(globalVariants, "theme", "altHeadlineFont")
              }
            )}
          >
            {"Get started with Plasmic"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box___0X7Ph
            )}
          >
            {"Try the demos, examples, and tutorials."}
          </div>
        </p.Stack>

        <ButtonLink
          data-plasmic-name={"buttonLink"}
          data-plasmic-override={overrides.buttonLink}
          href={"https://plasmic.app/signup" as const}
          icon={
            <Icon8Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg)}
              role={"img"}
            />
          }
          label={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__rkRfT
              )}
            >
              {"Try Plasmic for free"}
            </div>
          }
          type={["white", "rightIcon"]}
        />
      </p.Stack>
    </section>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "container23", "buttonLink", "svg"],
  container23: ["container23", "buttonLink", "svg"],
  buttonLink: ["buttonLink", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  container23: "div";
  buttonLink: typeof ButtonLink;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBottomCtaSection__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBottomCtaSection__VariantsArgs;
    args?: PlasmicBottomCtaSection__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicBottomCtaSection__Fetches;
  } & Omit<PlasmicBottomCtaSection__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBottomCtaSection__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBottomCtaSection__ArgProps,
      internalVariantPropNames: PlasmicBottomCtaSection__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicBottomCtaSection__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBottomCtaSection";
  } else {
    func.displayName = `PlasmicBottomCtaSection.${nodeName}`;
  }
  return func;
}

export const PlasmicBottomCtaSection = Object.assign(
  // Top-level PlasmicBottomCtaSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container23: makeNodeComponent("container23"),
    buttonLink: makeNodeComponent("buttonLink"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicBottomCtaSection
    internalVariantProps: PlasmicBottomCtaSection__VariantProps,
    internalArgProps: PlasmicBottomCtaSection__ArgProps
  }
);

export default PlasmicBottomCtaSection;
/* prettier-ignore-end */
