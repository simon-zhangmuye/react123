// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: ZsmzGgkZw2
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import GraphicIcon from "../../GraphicIcon"; // plasmic-import: TcXkT68Mp6/component
import Linky from "../../Linky"; // plasmic-import: EDH0JqEGKc/component
import ButtonLink from "../../ButtonLink"; // plasmic-import: jzdXOPDUzV/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: k7xdGnvUtPZ_s/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicSmallValuePropCard.module.css"; // plasmic-import: ZsmzGgkZw2/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 7p8MViVJAB/icon
import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: CbfsWz2JkE/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: wTfucAc7Rr/icon
import image16EjT54Ab5 from "./images/image16.png"; // plasmic-import: ejT54-AB5/picture

export type PlasmicSmallValuePropCard__VariantMembers = {
  ltr: "ltr";
  vertical: "vertical";
  rightImage: "rightImage";
  showcaseIsVideo: "showcaseIsVideo";
  reverse: "reverse";
};

export type PlasmicSmallValuePropCard__VariantsArgs = {
  ltr?: SingleBooleanChoiceArg<"ltr">;
  vertical?: SingleBooleanChoiceArg<"vertical">;
  rightImage?: SingleBooleanChoiceArg<"rightImage">;
  showcaseIsVideo?: SingleBooleanChoiceArg<"showcaseIsVideo">;
  reverse?: SingleBooleanChoiceArg<"reverse">;
};

type VariantPropType = keyof PlasmicSmallValuePropCard__VariantsArgs;
export const PlasmicSmallValuePropCard__VariantProps =
  new Array<VariantPropType>(
    "ltr",
    "vertical",
    "rightImage",
    "showcaseIsVideo",
    "reverse"
  );

export type PlasmicSmallValuePropCard__ArgsType = {
  icon?: React.ReactNode;
  actionButton?: React.ReactNode;
  description?: React.ReactNode;
  followupLink?: React.ReactNode;
  showcaseImage?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSmallValuePropCard__ArgsType;
export const PlasmicSmallValuePropCard__ArgProps = new Array<ArgPropType>(
  "icon",
  "actionButton",
  "description",
  "followupLink",
  "showcaseImage",
  "children"
);

export type PlasmicSmallValuePropCard__OverridesType = {
  root?: p.Flex<"div">;
  videoHover?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultSmallValuePropCardProps {
  icon?: React.ReactNode;
  actionButton?: React.ReactNode;
  description?: React.ReactNode;
  followupLink?: React.ReactNode;
  showcaseImage?: React.ReactNode;
  children?: React.ReactNode;
  ltr?: SingleBooleanChoiceArg<"ltr">;
  vertical?: SingleBooleanChoiceArg<"vertical">;
  rightImage?: SingleBooleanChoiceArg<"rightImage">;
  showcaseIsVideo?: SingleBooleanChoiceArg<"showcaseIsVideo">;
  reverse?: SingleBooleanChoiceArg<"reverse">;
  className?: string;
}

function PlasmicSmallValuePropCard__RenderFunc(props: {
  variants: PlasmicSmallValuePropCard__VariantsArgs;
  args: PlasmicSmallValuePropCard__ArgsType;
  overrides: PlasmicSmallValuePropCard__OverridesType;
  dataFetches?: PlasmicSmallValuePropCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__ltr]: hasVariant(variants, "ltr", "ltr"),
        [sty.root__ltr_rightImage]:
          hasVariant(variants, "ltr", "ltr") &&
          hasVariant(variants, "rightImage", "rightImage"),
        [sty.root__reverse]: hasVariant(variants, "reverse", "reverse"),
        [sty.root__rightImage]: hasVariant(
          variants,
          "rightImage",
          "rightImage"
        ),
        [sty.root__showcaseIsVideo]: hasVariant(
          variants,
          "showcaseIsVideo",
          "showcaseIsVideo"
        )
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__vGm3C, {
          [sty.box__ltr__vGm3Cql0Nf]: hasVariant(variants, "ltr", "ltr"),
          [sty.box__rightImage__vGm3CdScZs]: hasVariant(
            variants,
            "rightImage",
            "rightImage"
          ),
          [sty.box__rightImage_ltr__vGm3CdScZsQl0Nf]:
            hasVariant(variants, "rightImage", "rightImage") &&
            hasVariant(variants, "ltr", "ltr")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <GraphicIcon
              className={classNames("__wab_instance", sty.graphicIcon__iLpQh)}
            >
              <Icon6Icon
                className={classNames(defaultcss.all, sty.svg___1Lv7H)}
                role={"img"}
              />
            </GraphicIcon>
          ),

          value: args.icon
        })}

        <div
          className={classNames(defaultcss.all, sty.box__rfSRg, {
            [sty.box__ltr__rfSRgql0Nf]: hasVariant(variants, "ltr", "ltr"),
            [sty.box__rightImage__rfSRgdScZs]: hasVariant(
              variants,
              "rightImage",
              "rightImage"
            ),
            [sty.box__vertical__rfSRghjU5X]: hasVariant(
              variants,
              "vertical",
              "vertical"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box__roI0C, {
              [sty.box__rightImage__roI0CdScZs]: hasVariant(
                variants,
                "rightImage",
                "rightImage"
              ),
              [sty.box__vertical__roI0ChjU5X]: hasVariant(
                variants,
                "vertical",
                "vertical"
              )
            })}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___2LjYw, {
                [sty.box__ltr___2LjYWql0Nf]: hasVariant(variants, "ltr", "ltr"),
                [sty.box__rightImage___2LjYWdScZs]: hasVariant(
                  variants,
                  "rightImage",
                  "rightImage"
                ),
                [sty.box__rightImage_ltr___2LjYWdScZsQl0Nf]:
                  hasVariant(variants, "rightImage", "rightImage") &&
                  hasVariant(variants, "ltr", "ltr"),
                [sty.box__vertical___2LjYWhjU5X]: hasVariant(
                  variants,
                  "vertical",
                  "vertical"
                )
              })}
            >
              <div className={classNames(defaultcss.all, sty.box__c1XJd)}>
                <div className={classNames(defaultcss.all, sty.box__ev4I)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "This is the header.",
                    value: args.children,
                    className: classNames(sty.slotChildren)
                  })}
                </div>
              </div>

              <div
                className={classNames(defaultcss.all, sty.box__cTaeG, {
                  [sty.box__ltr__cTaeGql0Nf]: hasVariant(
                    variants,
                    "ltr",
                    "ltr"
                  ),
                  [sty.box__rightImage__cTaeGdScZs]: hasVariant(
                    variants,
                    "rightImage",
                    "rightImage"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Run with one of our templates, or start from scratch by drawing boxes and wireframes.",
                  value: args.description,
                  className: classNames(sty.slotDescription, {
                    [sty.slotDescription__ltr]: hasVariant(
                      variants,
                      "ltr",
                      "ltr"
                    ),
                    [sty.slotDescription__rightImage]: hasVariant(
                      variants,
                      "rightImage",
                      "rightImage"
                    )
                  })
                })}
              </div>

              {p.renderPlasmicSlot({
                defaultContents: (
                  <Linky
                    className={classNames("__wab_instance", sty.linky__kja0)}
                    link={
                      "https://studio.plasmic.app/?starters=general,site-builder" as const
                    }
                    style={["noPadding"]}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__bFksu
                      )}
                    >
                      {"Browse starter projects ->"}
                    </div>
                  </Linky>
                ),

                value: args.followupLink
              })}
            </p.Stack>
          </p.Stack>
        </div>
      </p.Stack>

      {(hasVariant(variants, "ltr", "ltr") ? true : false) ? (
        <div
          className={classNames(defaultcss.all, sty.box___01WCm, {
            [sty.box__ltr___01WCMql0Nf]: hasVariant(variants, "ltr", "ltr"),
            [sty.box__rightImage___01WCMdScZs]: hasVariant(
              variants,
              "rightImage",
              "rightImage"
            ),
            [sty.box__showcaseIsVideo___01WCm5W3Ij]: hasVariant(
              variants,
              "showcaseIsVideo",
              "showcaseIsVideo"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___8HVn7)}
                height={594 as const}
                role={"img"}
                src={image16EjT54Ab5}
                width={928 as const}
              />
            ),

            value: args.showcaseImage
          })}

          {(
            hasVariant(variants, "showcaseIsVideo", "showcaseIsVideo")
              ? true
              : false
          ) ? (
            <div
              data-plasmic-name={"videoHover"}
              data-plasmic-override={overrides.videoHover}
              className={classNames(defaultcss.all, sty.videoHover, {
                [sty.videoHover__showcaseIsVideo]: hasVariant(
                  variants,
                  "showcaseIsVideo",
                  "showcaseIsVideo"
                )
              })}
            >
              {(
                hasVariant(variants, "showcaseIsVideo", "showcaseIsVideo")
                  ? true
                  : false
              ) ? (
                <Icon31Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg, {
                    [sty.svg__showcaseIsVideo]: hasVariant(
                      variants,
                      "showcaseIsVideo",
                      "showcaseIsVideo"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          ) : null}
        </div>
      ) : null}
      {p.renderPlasmicSlot({
        defaultContents: (
          <ButtonLink
            className={classNames("__wab_instance", sty.buttonLink__hSvak)}
          />
        ),

        value: args.actionButton
      })}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "videoHover", "svg"],
  videoHover: ["videoHover", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  videoHover: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSmallValuePropCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSmallValuePropCard__VariantsArgs;
    args?: PlasmicSmallValuePropCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSmallValuePropCard__Fetches;
  } & Omit<PlasmicSmallValuePropCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSmallValuePropCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSmallValuePropCard__ArgProps,
      internalVariantPropNames: PlasmicSmallValuePropCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSmallValuePropCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSmallValuePropCard";
  } else {
    func.displayName = `PlasmicSmallValuePropCard.${nodeName}`;
  }
  return func;
}

export const PlasmicSmallValuePropCard = Object.assign(
  // Top-level PlasmicSmallValuePropCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    videoHover: makeNodeComponent("videoHover"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSmallValuePropCard
    internalVariantProps: PlasmicSmallValuePropCard__VariantProps,
    internalArgProps: PlasmicSmallValuePropCard__ArgProps
  }
);

export default PlasmicSmallValuePropCard;
/* prettier-ignore-end */
