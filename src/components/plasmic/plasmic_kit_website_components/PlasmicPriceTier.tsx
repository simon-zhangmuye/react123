// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kjuFFTSZb8fanzCHT2C1jz
// Component: AapVVGU4iu
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Linky from "../../Linky"; // plasmic-import: EDH0JqEGKc/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plasmic_kit_website_components.module.css"; // plasmic-import: kjuFFTSZb8fanzCHT2C1jz/projectcss
import * as sty from "./PlasmicPriceTier.module.css"; // plasmic-import: AapVVGU4iu/css

export type PlasmicPriceTier__VariantMembers = {};

export type PlasmicPriceTier__VariantsArgs = {};
type VariantPropType = keyof PlasmicPriceTier__VariantsArgs;
export const PlasmicPriceTier__VariantProps = new Array<VariantPropType>();

export type PlasmicPriceTier__ArgsType = {
  title?: React.ReactNode;
  price?: React.ReactNode;
  valueProps?: React.ReactNode;
  children?: React.ReactNode;
  subprice?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPriceTier__ArgsType;
export const PlasmicPriceTier__ArgProps = new Array<ArgPropType>(
  "title",
  "price",
  "valueProps",
  "children",
  "subprice"
);

export type PlasmicPriceTier__OverridesType = {
  root?: p.Flex<"div">;
  ctaLink?: p.Flex<"div">;
};

export interface DefaultPriceTierProps {
  title?: React.ReactNode;
  price?: React.ReactNode;
  valueProps?: React.ReactNode;
  children?: React.ReactNode;
  subprice?: React.ReactNode;
  className?: string;
}

function PlasmicPriceTier__RenderFunc(props: {
  variants: PlasmicPriceTier__VariantsArgs;
  args: PlasmicPriceTier__ArgsType;
  overrides: PlasmicPriceTier__OverridesType;
  dataFetches?: PlasmicPriceTier__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__fhEe6)}
      >
        <div className={classNames(defaultcss.all, sty.box__kftjm)}>
          {p.renderPlasmicSlot({
            defaultContents: "Starter",
            value: args.title,
            className: classNames(sty.slotTitle)
          })}

          {p.renderPlasmicSlot({
            defaultContents: "Free",
            value: args.price,
            className: classNames(sty.slotPrice)
          })}

          {p.renderPlasmicSlot({
            defaultContents: "per user/month",
            value: args.subprice,
            className: classNames(sty.slotSubprice)
          })}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: "✓ List of value props\n✓ It's so cool",
          value: args.valueProps,
          className: classNames(sty.slotValueProps)
        })}
      </p.Stack>

      <div
        data-plasmic-name={"ctaLink"}
        data-plasmic-override={overrides.ctaLink}
        className={classNames(defaultcss.all, sty.ctaLink)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Linky
              className={classNames("__wab_instance", sty.linky___407Uc)}
              style={["purpleSolid"]}
            />
          ),

          value: args.children
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "ctaLink"],
  ctaLink: ["ctaLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  ctaLink: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceTier__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceTier__VariantsArgs;
    args?: PlasmicPriceTier__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPriceTier__Fetches;
  } & Omit<PlasmicPriceTier__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPriceTier__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPriceTier__ArgProps,
      internalVariantPropNames: PlasmicPriceTier__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPriceTier__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceTier";
  } else {
    func.displayName = `PlasmicPriceTier.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceTier = Object.assign(
  // Top-level PlasmicPriceTier renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ctaLink: makeNodeComponent("ctaLink"),

    // Metadata about props expected for PlasmicPriceTier
    internalVariantProps: PlasmicPriceTier__VariantProps,
    internalArgProps: PlasmicPriceTier__ArgProps
  }
);

export default PlasmicPriceTier;
/* prettier-ignore-end */
