// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ahDbvP3tQbz5L86vvqnDB6
// Component: bYYOrCUz3HJWa
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HomeHeader from "../../HomeHeader"; // plasmic-import: PQbQ-icWs9nU4/component
import ListItem from "../../ListItem"; // plasmic-import: 94-lZb0fjQQyA/component
import { RadialChart } from "react-vis"; // plasmic-import: CmRX_JEoV5_Sl/codeComponent
import { XYPlot } from "react-vis"; // plasmic-import: hiPpwBH2ScAQm/codeComponent
import { XAxis } from "react-vis"; // plasmic-import: 0g_Y6lgeD60h1/codeComponent
import { YAxis } from "react-vis"; // plasmic-import: hjnehUtC0prJ-/codeComponent
import { VerticalBarSeries } from "react-vis"; // plasmic-import: qI8aeUTr16dqs/codeComponent
import { DynWiredButton } from "../../../../components/DynamicWired"; // plasmic-import: 5UaDB_-dLt-cO7/codeComponent
import { DynWiredIconButton } from "../../../../components/DynamicWired"; // plasmic-import: DJxaehVpFmtytS/codeComponent
import { Embed } from "../../../../components/Embed"; // plasmic-import: l-KMpKAkvkDEKo/codeComponent
import Footer from "../../Footer"; // plasmic-import: kDH3QFcb1WFI2/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_code_component_examples_primary_copy.module.css"; // plasmic-import: ahDbvP3tQbz5L86vvqnDB6/projectcss
import * as sty from "./PlasmicOldHome.module.css"; // plasmic-import: bYYOrCUz3HJWa/css

export type PlasmicOldHome__VariantMembers = {};

export type PlasmicOldHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicOldHome__VariantsArgs;
export const PlasmicOldHome__VariantProps = new Array<VariantPropType>();

export type PlasmicOldHome__ArgsType = {};
type ArgPropType = keyof PlasmicOldHome__ArgsType;
export const PlasmicOldHome__ArgProps = new Array<ArgPropType>();

export type PlasmicOldHome__OverridesType = {
  root?: p.Flex<"div">;
  homeHeader?: p.Flex<typeof HomeHeader>;
  container?: p.Flex<"div">;
  radialChart?: p.Flex<typeof RadialChart>;
  xyPlot?: p.Flex<typeof XYPlot>;
  xAxis?: p.Flex<typeof XAxis>;
  yAxis?: p.Flex<typeof YAxis>;
  barSeries?: p.Flex<typeof VerticalBarSeries>;
  wiredButton?: p.Flex<typeof DynWiredButton>;
  wiredIconButton?: p.Flex<typeof DynWiredIconButton>;
  embed?: p.Flex<typeof Embed>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultOldHomeProps {
  className?: string;
}

function PlasmicOldHome__RenderFunc(props: {
  variants: PlasmicOldHome__VariantsArgs;
  args: PlasmicOldHome__ArgsType;
  overrides: PlasmicOldHome__OverridesType;
  dataFetches?: PlasmicOldHome__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.box___6CGzF)}
          >
            <HomeHeader
              data-plasmic-name={"homeHeader"}
              data-plasmic-override={overrides.homeHeader}
              className={classNames("__wab_instance", sty.homeHeader)}
              title={"Code components"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"container"}
              data-plasmic-override={overrides.container}
              hasGap={true}
              className={classNames(defaultcss.all, sty.container)}
            >
              <ListItem
                _package={"react-vis"}
                className={classNames("__wab_instance", sty.listItem__xtohN)}
                title={"Radial Chart"}
              >
                <RadialChart
                  data-plasmic-name={"radialChart"}
                  data-plasmic-override={overrides.radialChart}
                  className={classNames("__wab_instance", sty.radialChart)}
                  data={[
                    { angle: 1 },
                    { angle: 5 },
                    { angle: 7 },
                    { angle: 12 },
                    { angle: 7 }
                  ]}
                  height={150 as const}
                  width={150 as const}
                />
              </ListItem>

              <ListItem
                _package={"react-vis"}
                className={classNames("__wab_instance", sty.listItem__heabO)}
                title={"Bar Series + XY Plot"}
              >
                {true ? (
                  <XYPlot
                    data-plasmic-name={"xyPlot"}
                    data-plasmic-override={overrides.xyPlot}
                    className={classNames("__wab_instance", sty.xyPlot)}
                    height={200 as const}
                    width={200 as const}
                    xDomain={[10, 50]}
                    yDomain={[0, 100]}
                  >
                    <XAxis
                      data-plasmic-name={"xAxis"}
                      data-plasmic-override={overrides.xAxis}
                      className={classNames("__wab_instance", sty.xAxis)}
                    />

                    <YAxis
                      data-plasmic-name={"yAxis"}
                      data-plasmic-override={overrides.yAxis}
                      className={classNames("__wab_instance", sty.yAxis)}
                    />

                    <VerticalBarSeries
                      data-plasmic-name={"barSeries"}
                      data-plasmic-override={overrides.barSeries}
                      barWidth={1 as const}
                      className={classNames("__wab_instance", sty.barSeries)}
                      data={[
                        { id: 0, x: 12, y: 30 },
                        { id: 1, x: 29, y: 46 },
                        { id: 2, x: 43, y: 60 },
                        { id: 3, x: 16, y: 40 },
                        { id: 4, x: 39, y: 55 },
                        { id: 5, x: 25, y: 94 },
                        { id: 6, x: 36, y: 78 },
                        { id: 7, x: 33, y: 69 }
                      ]}
                    />
                  </XYPlot>
                ) : null}
              </ListItem>

              <ListItem
                _package={"react-wired-elements"}
                className={classNames("__wab_instance", sty.listItem__r633H)}
                title={"Wired Elements"}
              >
                <div className={classNames(defaultcss.all, sty.box__qIouL)}>
                  <DynWiredButton
                    data-plasmic-name={"wiredButton"}
                    data-plasmic-override={overrides.wiredButton}
                    className={classNames("__wab_instance", sty.wiredButton)}
                  >
                    {"hello" as const}
                  </DynWiredButton>

                  <DynWiredIconButton
                    data-plasmic-name={"wiredIconButton"}
                    data-plasmic-override={overrides.wiredIconButton}
                    className={classNames(
                      "__wab_instance",
                      sty.wiredIconButton
                    )}
                  />
                </div>
              </ListItem>

              <ListItem
                _package={null}
                className={classNames("__wab_instance", sty.listItem__pASpI)}
                title={"Embed"}
              >
                <div className={classNames(defaultcss.all, sty.box__htPPg)}>
                  <Embed
                    data-plasmic-name={"embed"}
                    data-plasmic-override={overrides.embed}
                    className={classNames("__wab_instance", sty.embed)}
                    code={
                      '<iframe src="https://docs.google.com/spreadsheets/d/e/2PACX-1vRYFrjwk3GZLI0SVbJq0miRfvd1Zq_VDQTR3pWdlt2M1aDQuER9_7iKfvOb9lGKucHVGpGhOaeeWW1l/pubhtml?gid=0&amp;single=true&amp;widget=true&amp;headers=false"></iframe>' as const
                    }
                  />
                </div>
              </ListItem>
            </p.Stack>

            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "homeHeader",
    "container",
    "radialChart",
    "xyPlot",
    "xAxis",
    "yAxis",
    "barSeries",
    "wiredButton",
    "wiredIconButton",
    "embed",
    "footer"
  ],
  homeHeader: ["homeHeader"],
  container: [
    "container",
    "radialChart",
    "xyPlot",
    "xAxis",
    "yAxis",
    "barSeries",
    "wiredButton",
    "wiredIconButton",
    "embed"
  ],
  radialChart: ["radialChart"],
  xyPlot: ["xyPlot", "xAxis", "yAxis", "barSeries"],
  xAxis: ["xAxis"],
  yAxis: ["yAxis"],
  barSeries: ["barSeries"],
  wiredButton: ["wiredButton"],
  wiredIconButton: ["wiredIconButton"],
  embed: ["embed"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  homeHeader: typeof HomeHeader;
  container: "div";
  radialChart: typeof RadialChart;
  xyPlot: typeof XYPlot;
  xAxis: typeof XAxis;
  yAxis: typeof YAxis;
  barSeries: typeof VerticalBarSeries;
  wiredButton: typeof DynWiredButton;
  wiredIconButton: typeof DynWiredIconButton;
  embed: typeof Embed;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOldHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOldHome__VariantsArgs;
    args?: PlasmicOldHome__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicOldHome__Fetches;
  } & Omit<PlasmicOldHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOldHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOldHome__ArgProps,
      internalVariantPropNames: PlasmicOldHome__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicOldHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOldHome";
  } else {
    func.displayName = `PlasmicOldHome.${nodeName}`;
  }
  return func;
}

export const PlasmicOldHome = Object.assign(
  // Top-level PlasmicOldHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    homeHeader: makeNodeComponent("homeHeader"),
    container: makeNodeComponent("container"),
    radialChart: makeNodeComponent("radialChart"),
    xyPlot: makeNodeComponent("xyPlot"),
    xAxis: makeNodeComponent("xAxis"),
    yAxis: makeNodeComponent("yAxis"),
    barSeries: makeNodeComponent("barSeries"),
    wiredButton: makeNodeComponent("wiredButton"),
    wiredIconButton: makeNodeComponent("wiredIconButton"),
    embed: makeNodeComponent("embed"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicOldHome
    internalVariantProps: PlasmicOldHome__VariantProps,
    internalArgProps: PlasmicOldHome__ArgProps
  }
);

export default PlasmicOldHome;
/* prettier-ignore-end */
